export const problems = [
  {
    "title": "Find the Difference",
    "description": `
### Description
You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.

### Example 1
**Input:** \`s = "abcd"\`, \`t = "abcde"\`
**Output:** \`"e"\`
**Explanation:** 'e' is the letter that was added.

### Example 2
**Input:** \`s = ""\`, \`t = "y"\`
**Output:** \`"y"\`

### Constraints
0 <= s.length <= 1000
t.length == s.length + 1
s and t consist of lowercase English letters.
    `,
    "difficulty": "Easy",
    "testCases": [
      { "input": "\"abcd\",\"abcde\"", "output": "\"e\"" },
      { "input": "\"\",\"y\"", "output": "\"y\"" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def findTheDifference(self, s: str, t: str) -> str:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(',')\n    s = input_data[0].strip('\"')\n    t = input_data[1].strip('\"')\n    print(Solution().findTheDifference(s, t))",
        "finalCode": "class Solution:\n    def findTheDifference(self, s: str, t: str) -> str:\n        result = 0\n        for char in s + t:\n            result ^= ord(char)\n        return chr(result)\n\nif __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(',')\n    s = input_data[0].strip('\"')\n    t = input_data[1].strip('\"')\n    print(Solution().findTheDifference(s, t))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    findTheDifference(s, t) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(',');\n    const s = input[0].slice(1, -1);\n    const t = input[1].slice(1, -1);\n    console.log(new Solution().findTheDifference(s, t));\n});",
        "finalCode": "class Solution {\n    findTheDifference(s, t) {\n        let result = 0;\n        for (const char of s + t) {\n            result ^= char.charCodeAt(0);\n        }\n        return String.fromCharCode(result);\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(',');\n    const s = input[0].slice(1, -1);\n    const t = input[1].slice(1, -1);\n    console.log(new Solution().findTheDifference(s, t));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public char findTheDifference(String s, String t) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\",\");\n        String s = parts[0].substring(1, parts[0].length() - 1);\n        String t = parts[1].substring(1, parts[1].length() - 1);\n        System.out.println(new Solution().findTheDifference(s, t));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public char findTheDifference(String s, String t) {\n        int result = 0;\n        for (char c : (s + t).toCharArray()) {\n            result ^= c;\n        }\n        return (char) result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\",\");\n        String s = parts[0].substring(1, parts[0].length() - 1);\n        String t = parts[1].substring(1, parts[1].length() - 1);\n        System.out.println(new Solution().findTheDifference(s, t));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    char findTheDifference(string s, string t) {\n        \n    }\n};",
        "stdInRetrievalCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string input;\n    getline(cin, input);\n    size_t pos = input.find(',');\n    string s = input.substr(1, pos - 2);\n    string t = input.substr(pos + 2, input.length() - pos - 3);\n    Solution solution;\n    cout << solution.findTheDifference(s, t) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    char findTheDifference(string s, string t) {\n        char result = 0;\n        for (char c : s + t) {\n            result ^= c;\n        }\n        return result;\n    }\n};\n\nint main() {\n    string input;\n    getline(cin, input);\n    size_t pos = input.find(',');\n    string s = input.substr(1, pos - 2);\n    string t = input.substr(pos + 2, input.length() - pos - 3);\n    Solution solution;\n    cout << solution.findTheDifference(s, t) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Two Sum",
    "description": `
### Description
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

### Example 1
**Input:** \`nums = [2,7,11,15]\`, \`target = 9\`
**Output:** \`[0,1]\`
**Explanation:** Because nums[0] + nums[1] == 9, we return [0, 1].

### Example 2
**Input:** \`nums = [3,2,4]\`, \`target = 6\`
**Output:** \`[1,2]\`

### Example 3
**Input:** \`nums = [3,3]\`, \`target = 6\`
**Output:** \`[0,1]\`

### Constraints
2 <= nums.length <= 10^4
-10^9 <= nums[i] <= 10^9
-10^9 <= target <= 10^9
Only one valid answer exists.
    `,
    "difficulty": "Easy",
    "testCases": [
      { "input": "[2,7,11,15],9", "output": "[0,1]" },
      { "input": "[3,2,4],6", "output": "[1,2]" },
      { "input": "[3,3],6", "output": "[0,1]" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(',')\n    nums = list(map(int, input_data[0][1:-1].split(',')))\n    target = int(input_data[1])\n    print(Solution().twoSum(nums, target))",
        "finalCode": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        num_map = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_map:\n                return [num_map[complement], i]\n            num_map[num] = i\n        return []\n\nif __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(',')\n    nums = list(map(int, input_data[0][1:-1].split(',')))\n    target = int(input_data[1])\n    print(Solution().twoSum(nums, target))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    twoSum(nums, target) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(',');\n    const nums = JSON.parse(input[0]);\n    const target = parseInt(input[1], 10);\n    console.log(new Solution().twoSum(nums, target));\n});",
        "finalCode": "class Solution {\n    twoSum(nums, target) {\n        const numMap = new Map();\n        for (let i = 0; i < nums.length; i++) {\n            const complement = target - nums[i];\n            if (numMap.has(complement)) {\n                return [numMap.get(complement), i];\n            }\n            numMap.set(nums[i], i);\n        }\n        return [];\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(',');\n    const nums = JSON.parse(input[0]);\n    const target = parseInt(input[1], 10);\n    console.log(new Solution().twoSum(nums, target));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\",\");\n        int[] nums = Arrays.stream(parts[0].substring(1, parts[0].length() - 1).split(\",\")).mapToInt(Integer::parseInt).toArray();\n        int target = Integer.parseInt(parts[1]);\n        System.out.println(Arrays.toString(new Solution().twoSum(nums, target)));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> numMap = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if (numMap.containsKey(complement)) {\n                return new int[] { numMap.get(complement), i };\n            }\n            numMap.put(nums[i], i);\n        }\n        return new int[0];\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\",\");\n        int[] nums = Arrays.stream(parts[0].substring(1, parts[0].length() - 1).split(\",\")).mapToInt(Integer::parseInt).toArray();\n        int target = Integer.parseInt(parts[1]);\n        System.out.println(Arrays.toString(new Solution().twoSum(nums, target)));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        \n    }\n};",
        "stdInRetrievalCode": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\nusing namespace std;\n\nvector<int> parseInput(string input) {\n    vector<int> nums;\n    input = input.substr(1, input.size() - 2);\n    stringstream ss(input);\n    string num;\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n    return nums;\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n    size_t pos = input.find(',');\n    vector<int> nums = parseInput(input.substr(0, pos));\n    int target = stoi(input.substr(pos + 1));\n    Solution solution;\n    vector<int> result = solution.twoSum(nums, target);\n    cout << \"[\" << result[0] << \",\" << result[1] << \"]\" << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> numMap;\n        for (int i = 0; i < nums.size(); i++) {\n            int complement = target - nums[i];\n            if (numMap.find(complement) != numMap.end()) {\n                return {numMap[complement], i};\n            }\n            numMap[nums[i]] = i;\n        }\n        return {};\n    }\n};\n\nvector<int> parseInput(string input) {\n    vector<int> nums;\n    input = input.substr(1, input.size() - 2);\n    stringstream ss(input);\n    string num;\n    while (getline(ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n    return nums;\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n    size_t pos = input.find(',');\n    vector<int> nums = parseInput(input.substr(0, pos));\n    int target = stoi(input.substr(pos + 1));\n    Solution solution;\n    vector<int> result = solution.twoSum(nums, target);\n    cout << \"[\" << result[0] << \",\" << result[1] << \"]\" << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Palindrome Number",
    "description": `
### Description
Given an integer x, return true if x is a palindrome, and false otherwise.

### Example 1
**Input:** \`x = 121\`
**Output:** \`true\`
**Explanation:** 121 reads as 121 from left to right and from right to left.

### Example 2
**Input:** \`x = -121\`
**Output:** \`false\`
**Explanation:** From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.

### Example 3
**Input:** \`x = 10\`
**Output:** \`false\`
**Explanation:** Reads 01 from right to left. Therefore it is not a palindrome.

### Constraints
-2^31 <= x <= 2^31 - 1
    `,
    "difficulty": "Easy",
    "testCases": [
      { "input": "121", "output": "true" },
      { "input": "-121", "output": "false" },
      { "input": "10", "output": "false" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    x = int(sys.stdin.read().strip())\n    print(Solution().isPalindrome(x))",
        "finalCode": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        if x < 0:\n            return False\n        return str(x) == str(x)[::-1]\n\nif __name__ == \"__main__\":\n    import sys\n    x = int(sys.stdin.read().strip())\n    print(Solution().isPalindrome(x))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    isPalindrome(x) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const x = parseInt(data.toString().trim(), 10);\n    console.log(new Solution().isPalindrome(x));\n});",
        "finalCode": "class Solution {\n    isPalindrome(x) {\n        if (x < 0) return false;\n        return x.toString() === x.toString().split('').reverse().join('');\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const x = parseInt(data.toString().trim(), 10);\n    console.log(new Solution().isPalindrome(x));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public boolean isPalindrome(int x) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int x = scanner.nextInt();\n        System.out.println(new Solution().isPalindrome(x));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public boolean isPalindrome(int x) {\n        if (x < 0) return false;\n        int original = x, reversed = 0;\n        while (x != 0) {\n            int digit = x % 10;\n            reversed = reversed * 10 + digit;\n            x /= 10;\n        }\n        return original == reversed;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int x = scanner.nextInt();\n        System.out.println(new Solution().isPalindrome(x));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool isPalindrome(int x) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    int x;\n    cin >> x;\n    Solution solution;\n    cout << solution.isPalindrome(x) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x < 0) return false;\n        int original = x, reversed = 0;\n        while (x != 0) {\n            int digit = x % 10;\n            reversed = reversed * 10 + digit;\n            x /= 10;\n        }\n        return original == reversed;\n    }\n};\n\nint main() {\n    int x;\n    cin >> x;\n    Solution solution;\n    cout << solution.isPalindrome(x) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Add Two Numbers",
    "description": `
### Description
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

### Example 1
**Input:** \`l1 = [2,4,3]\`, \`l2 = [5,6,4]\`
**Output:** \`[7,0,8]\`
**Explanation:** 342 + 465 = 807.

### Example 2
**Input:** \`l1 = [0]\`, \`l2 = [0]\`
**Output:** \`[0]\`

### Example 3
**Input:** \`l1 = [9,9,9,9,9,9,9]\`, \`l2 = [9,9,9,9]\`
**Output:** \`[8,9,9,9,0,0,0,1]\`

### Constraints
The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.
    `,
    "difficulty": "Medium",
    "testCases": [
      { "input": "[2,4,3],[5,6,4]", "output": "[7,0,8]" },
      { "input": "[0],[0]", "output": "[0]" },
      { "input": "[9,9,9,9,9,9,9],[9,9,9,9]", "output": "[8,9,9,9,0,0,0,1]" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    import json\n    input_data = json.loads(sys.stdin.read().strip())\n    l1 = ListNode(input_data[0][0])\n    l2 = ListNode(input_data[1][0])\n    current1, current2 = l1, l2\n    for val in input_data[0][1:]:\n        current1.next = ListNode(val)\n        current1 = current1.next\n    for val in input_data[1][1:]:\n        current2.next = ListNode(val)\n        current2 = current2.next\n    result = Solution().addTwoNumbers(l1, l2)\n    output = []\n    while result:\n        output.append(result.val)\n        result = result.next\n    print(output)",
        "finalCode": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = ListNode()\n        current, carry = dummy, 0\n        while l1 or l2 or carry:\n            val1 = l1.val if l1 else 0\n            val2 = l2.val if l2 else 0\n            carry, out = divmod(val1 + val2 + carry, 10)\n            current.next = ListNode(out)\n            current = current.next\n            l1 = l1.next if l1 else None\n            l2 = l2.next if l2 else None\n        return dummy.next\n\nif __name__ == \"__main__\":\n    import sys\n    import json\n    input_data = json.loads(sys.stdin.read().strip())\n    l1 = ListNode(input_data[0][0])\n    l2 = ListNode(input_data[1][0])\n    current1, current2 = l1, l2\n    for val in input_data[0][1:]:\n        current1.next = ListNode(val)\n        current1 = current1.next\n    for val in input_data[1][1:]:\n        current2.next = ListNode(val)\n        current2 = current2.next\n    result = Solution().addTwoNumbers(l1, l2)\n    output = []\n    while result:\n        output.append(result.val)\n        result = result.next\n    print(output)"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class ListNode {\n    constructor(val = 0, next = null) {\n        this.val = val;\n        this.next = next;\n    }\n}\n\nclass Solution {\n    addTwoNumbers(l1, l2) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const input = JSON.parse(data.toString().trim());\n    const l1 = new ListNode(input[0][0]);\n    const l2 = new ListNode(input[1][0]);\n    let current1 = l1, current2 = l2;\n    for (let i = 1; i < input[0].length; i++) {\n        current1.next = new ListNode(input[0][i]);\n        current1 = current1.next;\n    }\n    for (let i = 1; i < input[1].length; i++) {\n        current2.next = new ListNode(input[1][i]);\n        current2 = current2.next;\n    }\n    const result = new Solution().addTwoNumbers(l1, l2);\n    const output = [];\n    while (result) {\n        output.push(result.val);\n        result = result.next;\n    }\n    console.log(output);\n});",
        "finalCode": "class ListNode {\n    constructor(val = 0, next = null) {\n        this.val = val;\n        this.next = next;\n    }\n}\n\nclass Solution {\n    addTwoNumbers(l1, l2) {\n        const dummy = new ListNode();\n        let current = dummy, carry = 0;\n        while (l1 || l2 || carry) {\n            const val1 = l1 ? l1.val : 0;\n            const val2 = l2 ? l2.val : 0;\n            const sum = val1 + val2 + carry;\n            carry = Math.floor(sum / 10);\n            current.next = new ListNode(sum % 10);\n            current = current.next;\n            l1 = l1 ? l1.next : null;\n            l2 = l2 ? l2.next : null;\n        }\n        return dummy.next;\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const input = JSON.parse(data.toString().trim());\n    const l1 = new ListNode(input[0][0]);\n    const l2 = new ListNode(input[1][0]);\n    let current1 = l1, current2 = l2;\n    for (let i = 1; i < input[0].length; i++) {\n        current1.next = new ListNode(input[0][i]);\n        current1 = current1.next;\n    }\n    for (let i = 1; i < input[1].length; i++) {\n        current2.next = new ListNode(input[1][i]);\n        current2 = current2.next;\n    }\n    const result = new Solution().addTwoNumbers(l1, l2);\n    const output = [];\n    while (result) {\n        output.push(result.val);\n        result = result.next;\n    }\n    console.log(output);\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass ListNode {\n    int val;\n    ListNode next;\n    ListNode() {}\n    ListNode(int val) { this.val = val; }\n    ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n}\n\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\",\");\n        ListNode l1 = new ListNode(Integer.parseInt(parts[0]));\n        ListNode l2 = new ListNode(Integer.parseInt(parts[1]));\n        ListNode current1 = l1, current2 = l2;\n        for (int i = 2; i < parts.length; i++) {\n            if (i < parts.length / 2) {\n                current1.next = new ListNode(Integer.parseInt(parts[i]));\n                current1 = current1.next;\n            } else {\n                current2.next = new ListNode(Integer.parseInt(parts[i]));\n                current2 = current2.next;\n            }\n        }\n        ListNode result = new Solution().addTwoNumbers(l1, l2);\n        while (result != null) {\n            System.out.print(result.val + \" \");\n            result = result.next;\n        }\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass ListNode {\n    int val;\n    ListNode next;\n    ListNode() {}\n    ListNode(int val) { this.val = val; }\n    ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n}\n\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode dummy = new ListNode(0);\n        ListNode current = dummy;\n        int carry = 0;\n        while (l1 != null || l2 != null || carry != 0) {\n            int val1 = (l1 != null) ? l1.val : 0;\n            int val2 = (l2 != null) ? l2.val : 0;\n            int sum = val1 + val2 + carry;\n            carry = sum / 10;\n            current.next = new ListNode(sum % 10);\n            current = current.next;\n            if (l1 != null) l1 = l1.next;\n            if (l2 != null) l2 = l2.next;\n        }\n        return dummy.next;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\",\");\n        ListNode l1 = new ListNode(Integer.parseInt(parts[0]));\n        ListNode l2 = new ListNode(Integer.parseInt(parts[1]));\n        ListNode current1 = l1, current2 = l2;\n        for (int i = 2; i < parts.length; i++) {\n            if (i < parts.length / 2) {\n                current1.next = new ListNode(Integer.parseInt(parts[i]));\n                current1 = current1.next;\n            } else {\n                current2.next = new ListNode(Integer.parseInt(parts[i]));\n                current2 = current2.next;\n            }\n        }\n        ListNode result = new Solution().addTwoNumbers(l1, l2);\n        while (result != null) {\n            System.out.print(result.val + \" \");\n            result = result.next;\n        }\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        \n    }\n};",
        "stdInRetrievalCode": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nListNode* createList(const vector<int>& values) {\n    ListNode* head = new ListNode(values[0]);\n    ListNode* current = head;\n    for (size_t i = 1; i < values.size(); ++i) {\n        current->next = new ListNode(values[i]);\n        current = current->next;\n    }\n    return head;\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n    size_t pos = input.find(\",\");\n    vector<int> l1_values, l2_values;\n    string l1_str = input.substr(0, pos);\n    string l2_str = input.substr(pos + 1);\n    stringstream ss1(l1_str), ss2(l2_str);\n    int num;\n    while (ss1 >> num) {\n        l1_values.push_back(num);\n        if (ss1.peek() == ',') ss1.ignore();\n    }\n    while (ss2 >> num) {\n        l2_values.push_back(num);\n        if (ss2.peek() == ',') ss2.ignore();\n    }\n    ListNode* l1 = createList(l1_values);\n    ListNode* l2 = createList(l2_values);\n    Solution solution;\n    ListNode* result = solution.addTwoNumbers(l1, l2);\n    while (result) {\n        cout << result->val << \" \";\n        result = result->next;\n    }\n    cout << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode* dummy = new ListNode(0);\n        ListNode* current = dummy;\n        int carry = 0;\n        while (l1 != nullptr || l2 != nullptr || carry != 0) {\n            int val1 = (l1 != nullptr) ? l1->val : 0;\n            int val2 = (l2 != nullptr) ? l2->val : 0;\n            int sum = val1 + val2 + carry;\n            carry = sum / 10;\n            current->next = new ListNode(sum % 10);\n            current = current->next;\n            if (l1 != nullptr) l1 = l1->next;\n            if (l2 != nullptr) l2 = l2->next;\n        }\n        return dummy->next;\n    }\n};\n\nListNode* createList(const vector<int>& values) {\n    ListNode* head = new ListNode(values[0]);\n    ListNode* current = head;\n    for (size_t i = 1; i < values.size(); ++i) {\n        current->next = new ListNode(values[i]);\n        current = current->next;\n    }\n    return head;\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n    size_t pos = input.find(\",\");\n    vector<int> l1_values, l2_values;\n    string l1_str = input.substr(0, pos);\n    string l2_str = input.substr(pos + 1);\n    stringstream ss1(l1_str), ss2(l2_str);\n    int num;\n    while (ss1 >> num) {\n        l1_values.push_back(num);\n        if (ss1.peek() == ',') ss1.ignore();\n    }\n    while (ss2 >> num) {\n        l2_values.push_back(num);\n        if (ss2.peek() == ',') ss2.ignore();\n    }\n    ListNode* l1 = createList(l1_values);\n    ListNode* l2 = createList(l2_values);\n    Solution solution;\n    ListNode* result = solution.addTwoNumbers(l1, l2);\n    while (result) {\n        cout << result->val << \" \";\n        result = result->next;\n    }\n    cout << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Find the Index of the First Occurrence in a String",
    "description": `
### Description
Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

### Example 1
**Input:** \`haystack = "sadbutsad"\`, \`needle = "sad"\`
**Output:** \`0\`
**Explanation:** "sad" occurs at index 0 and 6. The first occurrence is at index 0, so we return 0.

### Example 2
**Input:** \`haystack = "leetcode"\`, \`needle = "leeto"\`
**Output:** \`-1\`
**Explanation:** "leeto" did not occur in "leetcode", so we return -1.
    `,
    "difficulty": "Easy",
    "testCases": [
      { "input": "sadbutsad,sad", "output": "0" },
      { "input": "leetcode,leeto", "output": "-1" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(',')\n    haystack, needle = input_data[0], input_data[1]\n    print(Solution().strStr(haystack, needle))",
        "finalCode": "class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        return haystack.find(needle)\n\nif __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(',')\n    haystack, needle = input_data[0], input_data[1]\n    print(Solution().strStr(haystack, needle))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    strStr(haystack, needle) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(\",\");\n    const haystack = input[0];\n    const needle = input[1];\n    console.log(new Solution().strStr(haystack, needle));\n});",
        "finalCode": "class Solution {\n    strStr(haystack, needle) {\n        return haystack.indexOf(needle);\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(\",\");\n    const haystack = input[0];\n    const needle = input[1];\n    console.log(new Solution().strStr(haystack, needle));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public int strStr(String haystack, String needle) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\",\");\n        String haystack = parts[0];\n        String needle = parts[1];\n        System.out.println(new Solution().strStr(haystack, needle));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public int strStr(String haystack, String needle) {\n        return haystack.indexOf(needle);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\",\");\n        String haystack = parts[0];\n        String needle = parts[1];\n        System.out.println(new Solution().strStr(haystack, needle));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    string input;\n    getline(cin, input);\n    size_t pos = input.find(\",\");\n    string haystack = input.substr(0, pos);\n    string needle = input.substr(pos + 1);\n    Solution solution;\n    cout << solution.strStr(haystack, needle) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        return haystack.find(needle);\n    }\n};\n\nint main() {\n    string input;\n    getline(cin, input);\n    size_t pos = input.find(\",\");\n    string haystack = input.substr(0, pos);\n    string needle = input.substr(pos + 1);\n    Solution solution;\n    cout << solution.strStr(haystack, needle) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Rotate Array",
    "description": `
### Description
Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.

### Example 1
**Input:** \`nums = [1,2,3,4,5,6,7]\`, \`k = 3\`
**Output:** \`[5,6,7,1,2,3,4]\`
**Explanation:**
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]

### Example 2
**Input:** \`nums = [-1,-100,3,99]\`, \`k = 2\`
**Output:** \`[3,99,-1,-100]\`
**Explanation:**
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]

### Constraints
1 <= nums.length <= 10^5
-2^31 <= nums[i] <= 2^31 - 1
0 <= k <= 10^5
    `,
    "difficulty": "Medium",
    "testCases": [
      { "input": "1,2,3,4,5,6,7;3", "output": "5,6,7,1,2,3,4" },
      { "input": "-1,-100,3,99;2", "output": "3,99,-1,-100" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def rotate(self, nums: List[int], k: int) -> None:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(';')\n    nums = list(map(int, input_data[0].split(',')))\n    k = int(input_data[1])\n    Solution().rotate(nums, k)\n    print(','.join(map(str, nums)))",
        "finalCode": "class Solution:\n    def rotate(self, nums: List[int], k: int) -> None:\n        k = k % len(nums)\n        nums[:] = nums[-k:] + nums[:-k]\n\nif __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(';')\n    nums = list(map(int, input_data[0].split(',')))\n    k = int(input_data[1])\n    Solution().rotate(nums, k)\n    print(','.join(map(str, nums)))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    rotate(nums, k) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(';');\n    const nums = input[0].split(',').map(Number);\n    const k = parseInt(input[1]);\n    new Solution().rotate(nums, k);\n    console.log(nums.join(','));\n});",
        "finalCode": "class Solution {\n    rotate(nums, k) {\n        k = k % nums.length;\n        nums.unshift(...nums.splice(nums.length - k));\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(';');\n    const nums = input[0].split(',').map(Number);\n    const k = parseInt(input[1]);\n    new Solution().rotate(nums, k);\n    console.log(nums.join(','));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    void reverse(int[] nums, int i, int j) {\n        \n    }\n\n    public void rotate(int[] nums, int k) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\";\");\n        int[] nums = Arrays.stream(parts[0].split(\",\")).mapToInt(Integer::parseInt).toArray();\n        int k = Integer.parseInt(parts[1]);\n        new Solution().rotate(nums, k);\n        System.out.println(Arrays.toString(nums).replaceAll(\"[\\[\\] ]\", \"\"));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    void reverse(int[] nums, int i, int j) {\n        while (i < j) {\n            int temp = nums[i];\n            nums[i] = nums[j];\n            nums[j] = temp;\n            i++;\n            j--;\n        }\n    }\n\n    public void rotate(int[] nums, int k) {\n        k = k % nums.length;\n        reverse(nums, 0, nums.length - 1);\n        reverse(nums, 0, k - 1);\n        reverse(nums, k, nums.length - 1);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\";\");\n        int[] nums = Arrays.stream(parts[0].split(\",\")).mapToInt(Integer::parseInt).toArray();\n        int k = Integer.parseInt(parts[1]);\n        new Solution().rotate(nums, k);\n        System.out.println(Arrays.toString(nums).replaceAll(\"[\\[\\] ]\", \"\"));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nclass Solution {\npublic:\n    void rotate(vector<int>& nums, int k) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    string input;\n    getline(cin, input);\n    stringstream ss(input);\n    string nums_str, k_str;\n    getline(ss, nums_str, ';');\n    getline(ss, k_str, ';');\n    vector<int> nums;\n    stringstream nums_ss(nums_str);\n    string num;\n    while (getline(nums_ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n    int k = stoi(k_str);\n    Solution().rotate(nums, k);\n    for (int i = 0; i < nums.size(); ++i) {\n        if (i > 0) cout << \",\";\n        cout << nums[i];\n    }\n    cout << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nclass Solution {\npublic:\n    void rotate(vector<int>& nums, int k) {\n        k = k % nums.size();\n        reverse(nums.begin(), nums.end());\n        reverse(nums.begin(), nums.begin() + k);\n        reverse(nums.begin() + k, nums.end());\n    }\n};\n\nint main() {\n    string input;\n    getline(cin, input);\n    stringstream ss(input);\n    string nums_str, k_str;\n    getline(ss, nums_str, ';');\n    getline(ss, k_str, ';');\n    vector<int> nums;\n    stringstream nums_ss(nums_str);\n    string num;\n    while (getline(nums_ss, num, ',')) {\n        nums.push_back(stoi(num));\n    }\n    int k = stoi(k_str);\n    Solution().rotate(nums, k);\n    for (int i = 0; i < nums.size(); ++i) {\n        if (i > 0) cout << \",\";\n        cout << nums[i];\n    }\n    cout << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Valid Palindrome",
    "description": `
### Description
A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.

### Example 1
**Input:** \`s = "A man, a plan, a canal: Panama"\`
**Output:** \`true\`
**Explanation:** "amanaplanacanalpanama" is a palindrome.

### Example 2
**Input:** \`s = "race a car"\`
**Output:** \`false\`
**Explanation:** "raceacar" is not a palindrome.

### Example 3
**Input:** \`s = " "\`
**Output:** \`true\`
**Explanation:** s is an empty string "" after removing non-alphanumeric characters. Since an empty string reads the same forward and backward, it is a palindrome.

### Constraints
1 <= s.length <= 2 * 10^5
s consists only of printable ASCII characters.
    `,
    "difficulty": "Easy",
    "testCases": [
      { "input": "A man, a plan, a canal: Panama", "output": "true" },
      { "input": "race a car", "output": "false" },
      { "input": " ", "output": "true" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def isPalindrome(self, s: str) -> bool:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip()\n    print(Solution().isPalindrome(input_data))",
        "finalCode": "class Solution:\n    def isPalindrome(self, s: str) -> bool:\n        s = ''.join(char.lower() for char in s if char.isalnum())\n        return s == s[::-1]\n\nif __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip()\n    print(Solution().isPalindrome(input_data))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    isPalindrome(s) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim();\n    console.log(new Solution().isPalindrome(input));\n});",
        "finalCode": "class Solution {\n    isPalindrome(s) {\n        s = s.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n        return s === s.split('').reverse().join('');\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim();\n    console.log(new Solution().isPalindrome(input));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public boolean isPalindrome(String s) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        System.out.println(new Solution().isPalindrome(input));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public boolean isPalindrome(String s) {\n        s = s.replaceAll(\"[^a-zA-Z0-9]\", \"\").toLowerCase();\n        return new StringBuilder(s).reverse().toString().equals(s);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        System.out.println(new Solution().isPalindrome(input));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool isPalindrome(string s) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    string input;\n    getline(cin, input);\n    Solution solution;\n    cout << solution.isPalindrome(input) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool isPalindrome(string s) {\n        string filtered;\n        for (char c : s) {\n            if (isalnum(c)) {\n                filtered += tolower(c);\n            }\n        }\n        string reversed = filtered;\n        reverse(reversed.begin(), reversed.end());\n        return filtered == reversed;\n    }\n};\n\nint main() {\n    string input;\n    getline(cin, input);\n    Solution solution;\n    cout << solution.isPalindrome(input) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Is Subsequence",
    "description": `
### Description
Given two strings s and t, return true if s is a subsequence of t, or false otherwise.

A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).

### Example 1
**Input:** \`s = "abc"\`, \`t = "ahbgdc"\`
**Output:** \`true\`

### Example 2
**Input:** \`s = "axc"\`, \`t = "ahbgdc"\`
**Output:** \`false\`

### Constraints
0 <= s.length <= 100
0 <= t.length <= 10^4
s and t consist only of lowercase English letters.
    `,
    "difficulty": "Easy",
    "testCases": [
      { "input": "abc,ahbgdc", "output": "true" },
      { "input": "axc,ahbgdc", "output": "false" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(',')\n    s, t = input_data[0], input_data[1]\n    print(Solution().isSubsequence(s, t))",
        "finalCode": "class Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        it = iter(t)\n        return all(char in it for char in s)\n\nif __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(',')\n    s, t = input_data[0], input_data[1]\n    print(Solution().isSubsequence(s, t))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    isSubsequence(s, t) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(',');\n    const s = input[0];\n    const t = input[1];\n    console.log(new Solution().isSubsequence(s, t));\n});",
        "finalCode": "class Solution {\n    isSubsequence(s, t) {\n        let i = 0, j = 0;\n        while (i < s.length && j < t.length) {\n            if (s[i] === t[j]) i++;\n            j++;\n        }\n        return i === s.length;\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(',');\n    const s = input[0];\n    const t = input[1];\n    console.log(new Solution().isSubsequence(s, t));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public boolean isSubsequence(String s, String t) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\",\");\n        String s = parts[0];\n        String t = parts[1];\n        System.out.println(new Solution().isSubsequence(s, t));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public boolean isSubsequence(String s, String t) {\n        int i = 0, j = 0;\n        while (i < s.length() && j < t.length()) {\n            if (s.charAt(i) == t.charAt(j)) i++;\n            j++;\n        }\n        return i == s.length();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\",\");\n        String s = parts[0];\n        String t = parts[1];\n        System.out.println(new Solution().isSubsequence(s, t));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool isSubsequence(string s, string t) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    string input;\n    getline(cin, input);\n    size_t pos = input.find(\",\");\n    string s = input.substr(0, pos);\n    string t = input.substr(pos + 1);\n    Solution solution;\n    cout << solution.isSubsequence(s, t) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool isSubsequence(string s, string t) {\n        int i = 0, j = 0;\n        while (i < s.length() && j < t.length()) {\n            if (s[i] == t[j]) i++;\n            j++;\n        }\n        return i == s.length();\n    }\n};\n\nint main() {\n    string input;\n    getline(cin, input);\n    size_t pos = input.find(\",\");\n    string s = input.substr(0, pos);\n    string t = input.substr(pos + 1);\n    Solution solution;\n    cout << solution.isSubsequence(s, t) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Reverse Words in a String",
    "description": `
### Description
Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.

### Example 1
**Input:** \`s = "the sky is blue"\`
**Output:** \`"blue is sky the"\`

### Example 2
**Input:** \`s = "  hello world  "\`
**Output:** \`"world hello"\`
**Explanation:** Your reversed string should not contain leading or trailing spaces.

### Example 3
**Input:** \`s = "a good   example"\`
**Output:** \`"example good a"\`
**Explanation:** You need to reduce multiple spaces between two words to a single space in the reversed string.

### Constraints
1 <= s.length <= 10^4
s contains English letters (upper-case and lower-case), digits, and spaces ' '.
There is at least one word in s.
    `,
    "difficulty": "Medium",
    "testCases": [
      { "input": "the sky is blue", "output": "blue is sky the" },
      { "input": "  hello world  ", "output": "world hello" },
      { "input": "a good   example", "output": "example good a" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def reverseWords(self, s: str) -> str:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip()\n    print(Solution().reverseWords(input_data))",
        "finalCode": "class Solution:\n    def reverseWords(self, s: str) -> str:\n        return ' '.join(reversed(s.split()))\n\nif __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip()\n    print(Solution().reverseWords(input_data))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    reverseWords(s) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim();\n    console.log(new Solution().reverseWords(input));\n});",
        "finalCode": "class Solution {\n    reverseWords(s) {\n        return s.trim().split(/\\s+/).reverse().join(' ');\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim();\n    console.log(new Solution().reverseWords(input));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public String reverseWords(String s) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        System.out.println(new Solution().reverseWords(input));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public String reverseWords(String s) {\n        String[] words = s.trim().split(\"\\\\s+\");\n        Collections.reverse(Arrays.asList(words));\n        return String.join(\" \", words);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        System.out.println(new Solution().reverseWords(input));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    string reverseWords(string s) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    string input;\n    getline(cin, input);\n    Solution solution;\n    cout << solution.reverseWords(input) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    string reverseWords(string s) {\n        istringstream iss(s);\n        vector<string> words;\n        string word;\n        while (iss >> word) {\n            words.push_back(word);\n        }\n        reverse(words.begin(), words.end());\n        ostringstream oss;\n        for (size_t i = 0; i < words.size(); ++i) {\n            if (i > 0) oss << \" \";\n            oss << words[i];\n        }\n        return oss.str();\n    }\n};\n\nint main() {\n    string input;\n    getline(cin, input);\n    Solution solution;\n    cout << solution.reverseWords(input) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Length of Last Word",
    "description": `
### Description
Given a string s consisting of words and spaces, return the length of the last word in the string.

A word is a maximal substring consisting of non-space characters only.

### Example 1
**Input:** \`s = "Hello World"\`
**Output:** \`5\`
**Explanation:** The last word is "World" with length 5.

### Example 2
**Input:** \`s = "   fly me   to   the moon  "\`
**Output:** \`4\`
**Explanation:** The last word is "moon" with length 4.

### Example 3
**Input:** \`s = "luffy is still joyboy"\`
**Output:** \`6\`
**Explanation:** The last word is "joyboy" with length 6.

### Constraints
1 <= s.length <= 10^4
s consists of only English letters and spaces ' '.
There will be at least one word in s.
    `,
    "difficulty": "Easy",
    "testCases": [
      { "input": "Hello World", "output": "5" },
      { "input": "   fly me   to   the moon  ", "output": "4" },
      { "input": "luffy is still joyboy", "output": "6" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def lengthOfLastWord(self, s: str) -> int:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip()\n    print(Solution().lengthOfLastWord(input_data))",
        "finalCode": "class Solution:\n    def lengthOfLastWord(self, s: str) -> int:\n        return len(s.strip().split()[-1])\n\nif __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip()\n    print(Solution().lengthOfLastWord(input_data))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    lengthOfLastWord(s) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim();\n    console.log(new Solution().lengthOfLastWord(input));\n});",
        "finalCode": "class Solution {\n    lengthOfLastWord(s) {\n        return s.trim().split(/\\s+/).pop().length;\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim();\n    console.log(new Solution().lengthOfLastWord(input));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public int lengthOfLastWord(String s) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        System.out.println(new Solution().lengthOfLastWord(input));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public int lengthOfLastWord(String s) {\n        s = s.trim();\n        return s.length() - s.lastIndexOf(' ') - 1;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        System.out.println(new Solution().lengthOfLastWord(input));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    int lengthOfLastWord(string s) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    string input;\n    getline(cin, input);\n    Solution solution;\n    cout << solution.lengthOfLastWord(input) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    int lengthOfLastWord(string s) {\n        int length = 0;\n        int i = s.length() - 1;\n        while (i >= 0 && s[i] == ' ') i--;\n        while (i >= 0 && s[i] != ' ') {\n            length++;\n            i--;\n        }\n        return length;\n    }\n};\n\nint main() {\n    string input;\n    getline(cin, input);\n    Solution solution;\n    cout << solution.lengthOfLastWord(input) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Longest Common Prefix",
    "description": `
### Description
Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

### Example 1
**Input:** \`strs = ["flower","flow","flight"]\`
**Output:** \`"fl"\`

### Example 2
**Input:** \`strs = ["dog","racecar","car"]\`
**Output:** \`""\`
**Explanation:** There is no common prefix among the input strings.

### Constraints
1 <= strs.length <= 200
0 <= strs[i].length <= 200
strs[i] consists of only lowercase English letters.
    `,
    "difficulty": "Easy",
    "testCases": [
      { "input": "flower,flow,flight", "output": "fl" },
      { "input": "dog,racecar,car", "output": "" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(',')\n    print(Solution().longestCommonPrefix(input_data))",
        "finalCode": "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        if not strs:\n            return \"\"\n        prefix = strs[0]\n        for s in strs[1:]:\n            while s.find(prefix) != 0:\n                prefix = prefix[:-1]\n                if not prefix:\n                    return \"\"\n        return prefix\n\nif __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(',')\n    print(Solution().longestCommonPrefix(input_data))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    longestCommonPrefix(strs) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(',');\n    console.log(new Solution().longestCommonPrefix(input));\n});",
        "finalCode": "class Solution {\n    longestCommonPrefix(strs) {\n        if (!strs.length) return \"\";\n        let prefix = strs[0];\n        for (let i = 1; i < strs.length; i++) {\n            while (strs[i].indexOf(prefix) !== 0) {\n                prefix = prefix.substring(0, prefix.length - 1);\n                if (!prefix) return \"\";\n            }\n        }\n        return prefix;\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(',');\n    console.log(new Solution().longestCommonPrefix(input));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public String longestCommonPrefix(String[] strs) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] strs = input.split(\",\");\n        System.out.println(new Solution().longestCommonPrefix(strs));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public String longestCommonPrefix(String[] strs) {\n        if (strs.length == 0) return \"\";\n        String prefix = strs[0];\n        for (int i = 1; i < strs.length; i++) {\n            while (strs[i].indexOf(prefix) != 0) {\n                prefix = prefix.substring(0, prefix.length() - 1);\n                if (prefix.isEmpty()) return \"\";\n            }\n        }\n        return prefix;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] strs = input.split(\",\");\n        System.out.println(new Solution().longestCommonPrefix(strs));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    string input;\n    getline(cin, input);\n    vector<string> strs;\n    size_t pos = 0;\n    while ((pos = input.find(',')) != string::npos) {\n        strs.push_back(input.substr(0, pos));\n        input.erase(0, pos + 1);\n    }\n    strs.push_back(input);\n    Solution solution;\n    cout << solution.longestCommonPrefix(strs) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n        if (strs.empty()) return \"\";\n        string prefix = strs[0];\n        for (int i = 1; i < strs.size(); i++) {\n            while (strs[i].find(prefix) != 0) {\n                prefix = prefix.substr(0, prefix.size() - 1);\n                if (prefix.empty()) return \"\";\n            }\n        }\n        return prefix;\n    }\n};\n\nint main() {\n    string input;\n    getline(cin, input);\n    vector<string> strs;\n    size_t pos = 0;\n    while ((pos = input.find(',')) != string::npos) {\n        strs.push_back(input.substr(0, pos));\n        input.erase(0, pos + 1);\n    }\n    strs.push_back(input);\n    Solution solution;\n    cout << solution.longestCommonPrefix(strs) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Ransom Note",
    "description": `
### Description
Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise.

Each letter in magazine can only be used once in ransomNote.

### Example 1
**Input:** \`ransomNote = "a"\`, \`magazine = "b"\`
**Output:** \`false\`

### Example 2
**Input:** \`ransomNote = "aa"\`, \`magazine = "ab"\`
**Output:** \`false\`

### Example 3
**Input:** \`ransomNote = "aa"\`, \`magazine = "aab"\`
**Output:** \`true\`

### Constraints
1 <= ransomNote.length, magazine.length <= 10^5
ransomNote and magazine consist of lowercase English letters.
    `,
    "difficulty": "Easy",
    "testCases": [
      { "input": "a,b", "output": "false" },
      { "input": "aa,ab", "output": "false" },
      { "input": "aa,aab", "output": "true" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(',')\n    ransomNote, magazine = input_data[0], input_data[1]\n    print(Solution().canConstruct(ransomNote, magazine))",
        "finalCode": "class Solution:\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\n        from collections import Counter\n        ransom_counter = Counter(ransomNote)\n        magazine_counter = Counter(magazine)\n        for char, count in ransom_counter.items():\n            if magazine_counter[char] < count:\n                return False\n        return True\n\nif __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(',')\n    ransomNote, magazine = input_data[0], input_data[1]\n    print(Solution().canConstruct(ransomNote, magazine))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    canConstruct(ransomNote, magazine) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(',');\n    const ransomNote = input[0];\n    const magazine = input[1];\n    console.log(new Solution().canConstruct(ransomNote, magazine));\n});",
        "finalCode": "class Solution {\n    canConstruct(ransomNote, magazine) {\n        const magazineCount = {};\n        for (const char of magazine) {\n            magazineCount[char] = (magazineCount[char] || 0) + 1;\n        }\n        for (const char of ransomNote) {\n            if (!magazineCount[char]) return false;\n            magazineCount[char]--;\n        }\n        return true;\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(',');\n    const ransomNote = input[0];\n    const magazine = input[1];\n    console.log(new Solution().canConstruct(ransomNote, magazine));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public boolean canConstruct(String ransomNote, String magazine) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\",\");\n        String ransomNote = parts[0];\n        String magazine = parts[1];\n        System.out.println(new Solution().canConstruct(ransomNote, magazine));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public boolean canConstruct(String ransomNote, String magazine) {\n        int[] count = new int[26];\n        for (char c : magazine.toCharArray()) {\n            count[c - 'a']++;\n        }\n        for (char c : ransomNote.toCharArray()) {\n            if (count[c - 'a']-- == 0) return false;\n        }\n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\",\");\n        String ransomNote = parts[0];\n        String magazine = parts[1];\n        System.out.println(new Solution().canConstruct(ransomNote, magazine));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool canConstruct(string ransomNote, string magazine) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    string input;\n    getline(cin, input);\n    size_t pos = input.find(',');\n    string ransomNote = input.substr(0, pos);\n    string magazine = input.substr(pos + 1);\n    Solution solution;\n    cout << solution.canConstruct(ransomNote, magazine) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool canConstruct(string ransomNote, string magazine) {\n        unordered_map<char, int> count;\n        for (char c : magazine) {\n            count[c]++;\n        }\n        for (char c : ransomNote) {\n            if (count[c]-- == 0) return false;\n        }\n        return true;\n    }\n};\n\nint main() {\n    string input;\n    getline(cin, input);\n    size_t pos = input.find(',');\n    string ransomNote = input.substr(0, pos);\n    string magazine = input.substr(pos + 1);\n    Solution solution;\n    cout << solution.canConstruct(ransomNote, magazine) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Isomorphic Strings",
    "description": `
### Description
Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

### Example 1
**Input:** \`s = "egg"\`, \`t = "add"\`
**Output:** \`true\`
**Explanation:**
The strings s and t can be made identical by:
Mapping 'e' to 'a'.
Mapping 'g' to 'd'.

### Example 2
**Input:** \`s = "foo"\`, \`t = "bar"\`
**Output:** \`false\`
**Explanation:**
The strings s and t can not be made identical as 'o' needs to be mapped to both 'a' and 'r'.

### Example 3
**Input:** \`s = "paper"\`, \`t = "title"\`
**Output:** \`true\`

### Constraints
1 <= s.length <= 10^4
t.length == s.length
s and t consist of any valid ASCII character.
    `,
    "difficulty": "Easy",
    "testCases": [
      { "input": "egg,add", "output": "true" },
      { "input": "foo,bar", "output": "false" },
      { "input": "paper,title", "output": "true" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def isIsomorphic(self, s: str, t: str) -> bool:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(',')\n    s, t = input_data[0], input_data[1]\n    print(Solution().isIsomorphic(s, t))",
        "finalCode": "class Solution:\n    def isIsomorphic(self, s: str, t: str) -> bool:\n        s_to_t = {}\n        t_to_s = {}\n        for char_s, char_t in zip(s, t):\n            if char_s in s_to_t and s_to_t[char_s] != char_t:\n                return False\n            if char_t in t_to_s and t_to_s[char_t] != char_s:\n                return False\n            s_to_t[char_s] = char_t\n            t_to_s[char_t] = char_s\n        return True\n\nif __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(',')\n    s, t = input_data[0], input_data[1]\n    print(Solution().isIsomorphic(s, t))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    isIsomorphic(s, t) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(',');\n    const s = input[0];\n    const t = input[1];\n    console.log(new Solution().isIsomorphic(s, t));\n});",
        "finalCode": "class Solution {\n    isIsomorphic(s, t) {\n        const sToT = new Map();\n        const tToS = new Map();\n        for (let i = 0; i < s.length; i++) {\n            const charS = s[i];\n            const charT = t[i];\n            if (sToT.has(charS) && sToT.get(charS) !== charT) return false;\n            if (tToS.has(charT) && tToS.get(charT) !== charS) return false;\n            sToT.set(charS, charT);\n            tToS.set(charT, charS);\n        }\n        return true;\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(',');\n    const s = input[0];\n    const t = input[1];\n    console.log(new Solution().isIsomorphic(s, t));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public boolean isIsomorphic(String s, String t) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\",\");\n        String s = parts[0];\n        String t = parts[1];\n        System.out.println(new Solution().isIsomorphic(s, t));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public boolean isIsomorphic(String s, String t) {\n        if (s.length() != t.length()) return false;\n        Map<Character, Character> sToT = new HashMap<>();\n        Map<Character, Character> tToS = new HashMap<>();\n        for (int i = 0; i < s.length(); i++) {\n            char charS = s.charAt(i);\n            char charT = t.charAt(i);\n            if (sToT.containsKey(charS) && sToT.get(charS) != charT) return false;\n            if (tToS.containsKey(charT) && tToS.get(charT) != charS) return false;\n            sToT.put(charS, charT);\n            tToS.put(charT, charS);\n        }\n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\",\");\n        String s = parts[0];\n        String t = parts[1];\n        System.out.println(new Solution().isIsomorphic(s, t));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool isIsomorphic(string s, string t) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    string input;\n    getline(cin, input);\n    size_t pos = input.find(',');\n    string s = input.substr(0, pos);\n    string t = input.substr(pos + 1);\n    Solution solution;\n    cout << solution.isIsomorphic(s, t) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool isIsomorphic(string s, string t) {\n        unordered_map<char, char> sToT;\n        unordered_map<char, char> tToS;\n        for (int i = 0; i < s.length(); i++) {\n            char charS = s[i];\n            char charT = t[i];\n            if (sToT.count(charS) && sToT[charS] != charT) return false;\n            if (tToS.count(charT) && tToS[charT] != charS) return false;\n            sToT[charS] = charT;\n            tToS[charT] = charS;\n        }\n        return true;\n    }\n};\n\nint main() {\n    string input;\n    getline(cin, input);\n    size_t pos = input.find(',');\n    string s = input.substr(0, pos);\n    string t = input.substr(pos + 1);\n    Solution solution;\n    cout << solution.isIsomorphic(s, t) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Word Pattern",
    "description": `
### Description
Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s. Specifically:

Each letter in pattern maps to exactly one unique word in s.
Each unique word in s maps to exactly one letter in pattern.
No two letters map to the same word, and no two words map to the same letter.

### Example 1
**Input:** \`pattern = "abba"\`, \`s = "dog cat cat dog"\`
**Output:** \`true\`
**Explanation:**
The bijection can be established as:
'a' maps to "dog".
'b' maps to "cat".

### Example 2
**Input:** \`pattern = "abba"\`, \`s = "dog cat cat fish"\`
**Output:** \`false\`

### Example 3
**Input:** \`pattern = "aaaa"\`, \`s = "dog cat cat dog"\`
**Output:** \`false\`

### Constraints
1 <= pattern.length <= 10^4
s consists of lowercase English letters and spaces ' '.
    `,
    "difficulty": "Easy",
    "testCases": [
      { "input": "abba,dog cat cat dog", "output": "true" },
      { "input": "abba,dog cat cat fish", "output": "false" },
      { "input": "aaaa,dog cat cat dog", "output": "false" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(',')\n    pattern, s = input_data[0], input_data[1]\n    print(Solution().wordPattern(pattern, s))",
        "finalCode": "class Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        words = s.split()\n        if len(pattern) != len(words):\n            return False\n        char_to_word = {}\n        word_to_char = {}\n        for char, word in zip(pattern, words):\n            if char in char_to_word and char_to_word[char] != word:\n                return False\n            if word in word_to_char and word_to_char[word] != char:\n                return False\n            char_to_word[char] = word\n            word_to_char[word] = char\n        return True\n\nif __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(',')\n    pattern, s = input_data[0], input_data[1]\n    print(Solution().wordPattern(pattern, s))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    wordPattern(pattern, s) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(',');\n    const pattern = input[0];\n    const s = input[1];\n    console.log(new Solution().wordPattern(pattern, s));\n});",
        "finalCode": "class Solution {\n    wordPattern(pattern, s) {\n        const words = s.split(' ');\n        if (pattern.length !== words.length) return false;\n        const charToWord = new Map();\n        const wordToChar = new Map();\n        for (let i = 0; i < pattern.length; i++) {\n            const char = pattern[i];\n            const word = words[i];\n            if (charToWord.has(char) && charToWord.get(char) !== word) return false;\n            if (wordToChar.has(word) && wordToChar.get(word) !== char) return false;\n            charToWord.set(char, word);\n            wordToChar.set(word, char);\n        }\n        return true;\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(',');\n    const pattern = input[0];\n    const s = input[1];\n    console.log(new Solution().wordPattern(pattern, s));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public boolean wordPattern(String pattern, String s) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\",\");\n        String pattern = parts[0];\n        String s = parts[1];\n        System.out.println(new Solution().wordPattern(pattern, s));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public boolean wordPattern(String pattern, String s) {\n        String[] words = s.split(\" \");\n        if (pattern.length() != words.length) return false;\n        Map<Character, String> charToWord = new HashMap<>();\n        Map<String, Character> wordToChar = new HashMap<>();\n        for (int i = 0; i < pattern.length(); i++) {\n            char c = pattern.charAt(i);\n            String word = words[i];\n            if (charToWord.containsKey(c) && !charToWord.get(c).equals(word)) return false;\n            if (wordToChar.containsKey(word) && wordToChar.get(word) != c) return false;\n            charToWord.put(c, word);\n            wordToChar.put(word, c);\n        }\n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\",\");\n        String pattern = parts[0];\n        String s = parts[1];\n        System.out.println(new Solution().wordPattern(pattern, s));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <sstream>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool wordPattern(string pattern, string s) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    string input;\n    getline(cin, input);\n    size_t pos = input.find(',');\n    string pattern = input.substr(0, pos);\n    string s = input.substr(pos + 1);\n    Solution solution;\n    cout << solution.wordPattern(pattern, s) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <sstream>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool wordPattern(string pattern, string s) {\n        istringstream iss(s);\n        vector<string> words;\n        string word;\n        while (iss >> word) {\n            words.push_back(word);\n        }\n        if (pattern.length() != words.size()) return false;\n        unordered_map<char, string> charToWord;\n        unordered_map<string, char> wordToChar;\n        for (int i = 0; i < pattern.length(); i++) {\n            char c = pattern[i];\n            string w = words[i];\n            if (charToWord.count(c) && charToWord[c] != w) return false;\n            if (wordToChar.count(w) && wordToChar[w] != c) return false;\n            charToWord[c] = w;\n            wordToChar[w] = c;\n        }\n        return true;\n    }\n};\n\nint main() {\n    string input;\n    getline(cin, input);\n    size_t pos = input.find(',');\n    string pattern = input.substr(0, pos);\n    string s = input.substr(pos + 1);\n    Solution solution;\n    cout << solution.wordPattern(pattern, s) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Valid Anagram",
    "description": `
### Description
Given two strings s and t, return true if t is an anagram of s, and false otherwise.

### Example 1
**Input:** \`s = "anagram"\`, \`t = "nagaram"\`
**Output:** \`true\`

### Example 2
**Input:** \`s = "rat"\`, \`t = "car"\`
**Output:** \`false\`

### Constraints
1 <= s.length, t.length <= 5 * 10^4
s and t consist of lowercase English letters.
    `,
    "difficulty": "Easy",
    "testCases": [
      { "input": "anagram,nagaram", "output": "true" },
      { "input": "rat,car", "output": "false" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(',')\n    s, t = input_data[0], input_data[1]\n    print(Solution().isAnagram(s, t))",
        "finalCode": "class Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        return sorted(s) == sorted(t)\n\nif __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(',')\n    s, t = input_data[0], input_data[1]\n    print(Solution().isAnagram(s, t))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    isAnagram(s, t) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(',');\n    const s = input[0];\n    const t = input[1];\n    console.log(new Solution().isAnagram(s, t));\n});",
        "finalCode": "class Solution {\n    isAnagram(s, t) {\n        if (s.length !== t.length) return false;\n        const count = {};\n        for (const char of s) {\n            count[char] = (count[char] || 0) + 1;\n        }\n        for (const char of t) {\n            if (!count[char]) return false;\n            count[char]--;\n        }\n        return true;\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(',');\n    const s = input[0];\n    const t = input[1];\n    console.log(new Solution().isAnagram(s, t));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public boolean isAnagram(String s, String t) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\",\");\n        String s = parts[0];\n        String t = parts[1];\n        System.out.println(new Solution().isAnagram(s, t));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public boolean isAnagram(String s, String t) {\n        if (s.length() != t.length()) return false;\n        int[] count = new int[26];\n        for (char c : s.toCharArray()) {\n            count[c - 'a']++;\n        }\n        for (char c : t.toCharArray()) {\n            if (count[c - 'a']-- == 0) return false;\n        }\n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\",\");\n        String s = parts[0];\n        String t = parts[1];\n        System.out.println(new Solution().isAnagram(s, t));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    string input;\n    getline(cin, input);\n    size_t pos = input.find(',');\n    string s = input.substr(0, pos);\n    string t = input.substr(pos + 1);\n    Solution solution;\n    cout << solution.isAnagram(s, t) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        if (s.length() != t.length()) return false;\n        unordered_map<char, int> count;\n        for (char c : s) {\n            count[c]++;\n        }\n        for (char c : t) {\n            if (count[c]-- == 0) return false;\n        }\n        return true;\n    }\n};\n\nint main() {\n    string input;\n    getline(cin, input);\n    size_t pos = input.find(',');\n    string s = input.substr(0, pos);\n    string t = input.substr(pos + 1);\n    Solution solution;\n    cout << solution.isAnagram(s, t) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Group Anagrams",
    "description": `
### Description
Given an array of strings strs, group the anagrams together. You can return the answer in any order.

### Example 1
**Input:** \`strs = ["eat","tea","tan","ate","nat","bat"]\`
**Output:** \`[["bat"],["nat","tan"],["ate","eat","tea"]]\`
**Explanation:**
There is no string in strs that can be rearranged to form "bat".
The strings "nat" and "tan" are anagrams as they can be rearranged to form each other.
The strings "ate", "eat", and "tea" are anagrams as they can be rearranged to form each other.

### Example 2
**Input:** \`strs = [""]\`
**Output:** \`[[""]]\`

### Example 3
**Input:** \`strs = ["a"]\`
**Output:** \`[["a"]]\`

### Constraints
1 <= strs.length <= 10^4
0 <= strs[i].length <= 100
strs[i] consists of lowercase English letters.
    `,
    "difficulty": "Medium",
    "testCases": [
      { "input": "eat,tea,tan,ate,nat,bat", "output": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]" },
      { "input": "", "output": "[[\"\"]]" },
      { "input": "a", "output": "[[\"a\"]]" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(',')\n    print(Solution().groupAnagrams(input_data))",
        "finalCode": "from collections import defaultdict\n\nclass Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        anagrams = defaultdict(list)\n        for s in strs:\n            sorted_s = ''.join(sorted(s))\n            anagrams[sorted_s].append(s)\n        return list(anagrams.values())\n\nif __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(',')\n    print(Solution().groupAnagrams(input_data))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    groupAnagrams(strs) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(',');\n    console.log(new Solution().groupAnagrams(input));\n});",
        "finalCode": "class Solution {\n    groupAnagrams(strs) {\n        const anagrams = {};\n        for (const str of strs) {\n            const sortedStr = str.split('').sort().join('');\n            if (!anagrams[sortedStr]) {\n                anagrams[sortedStr] = [];\n            }\n            anagrams[sortedStr].push(str);\n        }\n        return Object.values(anagrams);\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(',');\n    console.log(new Solution().groupAnagrams(input));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] strs = input.split(\",\");\n        System.out.println(new Solution().groupAnagrams(strs));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        Map<String, List<String>> anagrams = new HashMap<>();\n        for (String str : strs) {\n            char[] charArray = str.toCharArray();\n            Arrays.sort(charArray);\n            String sortedStr = new String(charArray);\n            if (!anagrams.containsKey(sortedStr)) {\n                anagrams.put(sortedStr, new ArrayList<>());\n            }\n            anagrams.get(sortedStr).add(str);\n        }\n        return new ArrayList<>(anagrams.values());\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] strs = input.split(\",\");\n        System.out.println(new Solution().groupAnagrams(strs));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    string input;\n    getline(cin, input);\n    vector<string> strs;\n    size_t pos = 0;\n    while ((pos = input.find(',')) != string::npos) {\n        strs.push_back(input.substr(0, pos));\n        input.erase(0, pos + 1);\n    }\n    strs.push_back(input);\n    Solution solution;\n    vector<vector<string>> result = solution.groupAnagrams(strs);\n    for (const auto& group : result) {\n        cout << \"[\";\n        for (size_t i = 0; i < group.size(); ++i) {\n            if (i > 0) cout << \",\";\n            cout << group[i];\n        }\n        cout << \"]\";\n    }\n    cout << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n        unordered_map<string, vector<string>> anagrams;\n        for (const string& str : strs) {\n            string sortedStr = str;\n            sort(sortedStr.begin(), sortedStr.end());\n            anagrams[sortedStr].push_back(str);\n        }\n        vector<vector<string>> result;\n        for (const auto& pair : anagrams) {\n            result.push_back(pair.second);\n        }\n        return result;\n    }\n};\n\nint main() {\n    string input;\n    getline(cin, input);\n    vector<string> strs;\n    size_t pos = 0;\n    while ((pos = input.find(',')) != string::npos) {\n        strs.push_back(input.substr(0, pos));\n        input.erase(0, pos + 1);\n    }\n    strs.push_back(input);\n    Solution solution;\n    vector<vector<string>> result = solution.groupAnagrams(strs);\n    for (const auto& group : result) {\n        cout << \"[\";\n        for (size_t i = 0; i < group.size(); ++i) {\n            if (i > 0) cout << \",\";\n            cout << group[i];\n        }\n        cout << \"]\";\n    }\n    cout << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Happy Number",
    "description": `
### Description
Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

### Example 1
**Input:** \`n = 19\`
**Output:** \`true\`
**Explanation:**
1^2 + 9^2 = 82
8^2 + 2^2 = 68
6^2 + 8^2 = 100
1^2 + 0^2 + 0^2 = 1

### Example 2
**Input:** \`n = 2\`
**Output:** \`false\`

### Constraints
1 <= n <= 2^31 - 1
    `,
    "difficulty": "Easy",
    "testCases": [
      { "input": "19", "output": "true" },
      { "input": "2", "output": "false" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def isHappy(self, n: int) -> bool:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip()\n    n = int(input_data)\n    print(Solution().isHappy(n))",
        "finalCode": "class Solution:\n    def isHappy(self, n: int) -> bool:\n        def get_next(number):\n            return sum(int(char) ** 2 for char in str(number))\n        seen = set()\n        while n != 1 and n not in seen:\n            seen.add(n)\n            n = get_next(n)\n        return n == 1\n\nif __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip()\n    n = int(input_data)\n    print(Solution().isHappy(n))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    isHappy(n) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const n = parseInt(data.toString().trim(), 10);\n    console.log(new Solution().isHappy(n));\n});",
        "finalCode": "class Solution {\n    isHappy(n) {\n        const getNext = (number) => {\n            return number.toString().split('').reduce((sum, char) => sum + Math.pow(parseInt(char), 2), 0);\n        };\n        const seen = new Set();\n        while (n !== 1 && !seen.has(n)) {\n            seen.add(n);\n            n = getNext(n);\n        }\n        return n === 1;\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const n = parseInt(data.toString().trim(), 10);\n    console.log(new Solution().isHappy(n));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public boolean isHappy(int n) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        System.out.println(new Solution().isHappy(n));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public boolean isHappy(int n) {\n        Set<Integer> seen = new HashSet<>();\n        while (n != 1 && !seen.contains(n)) {\n            seen.add(n);\n            n = getNext(n);\n        }\n        return n == 1;\n    }\n\n    private int getNext(int number) {\n        int totalSum = 0;\n        while (number > 0) {\n            int digit = number % 10;\n            number = number / 10;\n            totalSum += digit * digit;\n        }\n        return totalSum;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        System.out.println(new Solution().isHappy(n));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <unordered_set>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool isHappy(int n) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    int n;\n    cin >> n;\n    Solution solution;\n    cout << solution.isHappy(n) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <unordered_set>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool isHappy(int n) {\n        auto getNext = [](int number) {\n            int totalSum = 0;\n            while (number > 0) {\n                int digit = number % 10;\n                number = number / 10;\n                totalSum += digit * digit;\n            }\n            return totalSum;\n        };\n        unordered_set<int> seen;\n        while (n != 1 && seen.find(n) == seen.end()) {\n            seen.insert(n);\n            n = getNext(n);\n        }\n        return n == 1;\n    }\n};\n\nint main() {\n    int n;\n    cin >> n;\n    Solution solution;\n    cout << solution.isHappy(n) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Contains Duplicate II",
    "description": `
### Description
Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.

### Example 1
**Input:** \`nums = [1,2,3,1]\`, \`k = 3\`
**Output:** \`true\`

### Example 2
**Input:** \`nums = [1,0,1,1]\`, \`k = 1\`
**Output:** \`true\`

### Example 3
**Input:** \`nums = [1,2,3,1,2,3]\`, \`k = 2\`
**Output:** \`false\`

### Constraints
1 <= nums.length <= 10^5
-10^9 <= nums[i] <= 10^9
0 <= k <= 10^5
    `,
    "difficulty": "Easy",
    "testCases": [
      { "input": "1,2,3,1;3", "output": "true" },
      { "input": "1,0,1,1;1", "output": "true" },
      { "input": "1,2,3,1,2,3;2", "output": "false" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(';')\n    nums = list(map(int, input_data[0].split(',')))\n    k = int(input_data[1])\n    print(Solution().containsNearbyDuplicate(nums, k))",
        "finalCode": "class Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n        num_dict = {}\n        for i, num in enumerate(nums):\n            if num in num_dict and i - num_dict[num] <= k:\n                return True\n            num_dict[num] = i\n        return False\n\nif __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(';')\n    nums = list(map(int, input_data[0].split(',')))\n    k = int(input_data[1])\n    print(Solution().containsNearbyDuplicate(nums, k))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    containsNearbyDuplicate(nums, k) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(';');\n    const nums = input[0].split(',').map(Number);\n    const k = parseInt(input[1]);\n    console.log(new Solution().containsNearbyDuplicate(nums, k));\n});",
        "finalCode": "class Solution {\n    containsNearbyDuplicate(nums, k) {\n        const numDict = {};\n        for (let i = 0; i < nums.length; i++) {\n            if (numDict[nums[i]] !== undefined && i - numDict[nums[i]] <= k) {\n                return true;\n            }\n            numDict[nums[i]] = i;\n        }\n        return false;\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(';');\n    const nums = input[0].split(',').map(Number);\n    const k = parseInt(input[1]);\n    console.log(new Solution().containsNearbyDuplicate(nums, k));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public boolean containsNearbyDuplicate(int[] nums, int k) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\";\");\n        int[] nums = Arrays.stream(parts[0].split(\",\")).mapToInt(Integer::parseInt).toArray();\n        int k = Integer.parseInt(parts[1]);\n        System.out.println(new Solution().containsNearbyDuplicate(nums, k));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public boolean containsNearbyDuplicate(int[] nums, int k) {\n        Map<Integer, Integer> numDict = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            if (numDict.containsKey(nums[i]) && i - numDict.get(nums[i]) <= k) {\n                return true;\n            }\n            numDict.put(nums[i], i);\n        }\n        return false;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\";\");\n        int[] nums = Arrays.stream(parts[0].split(\",\")).mapToInt(Integer::parseInt).toArray();\n        int k = Integer.parseInt(parts[1]);\n        System.out.println(new Solution().containsNearbyDuplicate(nums, k));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool containsNearbyDuplicate(vector<int>& nums, int k) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    string input;\n    getline(cin, input);\n    size_t pos = input.find(';');\n    string nums_str = input.substr(0, pos);\n    int k = stoi(input.substr(pos + 1));\n    vector<int> nums;\n    size_t start = 0, end = nums_str.find(',');\n    while (end != string::npos) {\n        nums.push_back(stoi(nums_str.substr(start, end - start)));\n        start = end + 1;\n        end = nums_str.find(',', start);\n    }\n    nums.push_back(stoi(nums_str.substr(start)));\n    Solution solution;\n    cout << solution.containsNearbyDuplicate(nums, k) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool containsNearbyDuplicate(vector<int>& nums, int k) {\n        unordered_map<int, int> numDict;\n        for (int i = 0; i < nums.size(); i++) {\n            if (numDict.count(nums[i]) && i - numDict[nums[i]] <= k) {\n                return true;\n            }\n            numDict[nums[i]] = i;\n        }\n        return false;\n    }\n};\n\nint main() {\n    string input;\n    getline(cin, input);\n    size_t pos = input.find(';');\n    string nums_str = input.substr(0, pos);\n    int k = stoi(input.substr(pos + 1));\n    vector<int> nums;\n    size_t start = 0, end = nums_str.find(',');\n    while (end != string::npos) {\n        nums.push_back(stoi(nums_str.substr(start, end - start)));\n        start = end + 1;\n        end = nums_str.find(',', start);\n    }\n    nums.push_back(stoi(nums_str.substr(start)));\n    Solution solution;\n    cout << solution.containsNearbyDuplicate(nums, k) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Longest Consecutive Sequence",
    "description": `
### Description
Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.

### Example 1
**Input:** \`nums = [100,4,200,1,3,2]\`
**Output:** \`4\`
**Explanation:** The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

### Example 2
**Input:** \`nums = [0,3,7,2,5,8,4,6,0,1]\`
**Output:** \`9\`

### Constraints
0 <= nums.length <= 10^5
-10^9 <= nums[i] <= 10^9
    `,
    "difficulty": "Medium",
    "testCases": [
      { "input": "100,4,200,1,3,2", "output": "4" },
      { "input": "0,3,7,2,5,8,4,6,0,1", "output": "9" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    input_data = list(map(int, sys.stdin.read().strip().split(',')))\n    print(Solution().longestConsecutive(input_data))",
        "finalCode": "class Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        num_set = set(nums)\n        longest_streak = 0\n\n        for num in num_set:\n            if num - 1 not in num_set:\n                current_num = num\n                current_streak = 1\n\n                while current_num + 1 in num_set:\n                    current_num += 1\n                    current_streak += 1\n\n                longest_streak = max(longest_streak, current_streak)\n\n        return longest_streak\n\nif __name__ == \"__main__\":\n    import sys\n    input_data = list(map(int, sys.stdin.read().strip().split(',')))\n    print(Solution().longestConsecutive(input_data))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    longestConsecutive(nums) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(',').map(Number);\n    console.log(new Solution().longestConsecutive(input));\n});",
        "finalCode": "class Solution {\n    longestConsecutive(nums) {\n        const numSet = new Set(nums);\n        let longestStreak = 0;\n\n        for (const num of numSet) {\n            if (!numSet.has(num - 1)) {\n                let currentNum = num;\n                let currentStreak = 1;\n\n                while (numSet.has(currentNum + 1)) {\n                    currentNum += 1;\n                    currentStreak += 1;\n                }\n\n                longestStreak = Math.max(longestStreak, currentStreak);\n            }\n        }\n\n        return longestStreak;\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(',').map(Number);\n    console.log(new Solution().longestConsecutive(input));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public int longestConsecutive(int[] nums) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        int[] nums = Arrays.stream(input.split(\",\")).mapToInt(Integer::parseInt).toArray();\n        System.out.println(new Solution().longestConsecutive(nums));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public int longestConsecutive(int[] nums) {\n        Set<Integer> numSet = new HashSet<>();\n        for (int num : nums) {\n            numSet.add(num);\n        }\n\n        int longestStreak = 0;\n\n        for (int num : numSet) {\n            if (!numSet.contains(num - 1)) {\n                int currentNum = num;\n                int currentStreak = 1;\n\n                while (numSet.contains(currentNum + 1)) {\n                    currentNum += 1;\n                    currentStreak += 1;\n                }\n\n                longestStreak = Math.max(longestStreak, currentStreak);\n            }\n        }\n\n        return longestStreak;\n    }\n}\n\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        int[] nums = Arrays.stream(input.split(\",\")).mapToInt(Integer::parseInt).toArray();\n        System.out.println(new Solution().longestConsecutive(nums));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <vector>\n#include <unordered_set>\nusing namespace std;\n\nclass Solution {\npublic:\n    int longestConsecutive(vector<int>& nums) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    string input;\n    getline(cin, input);\n    vector<int> nums;\n    size_t pos = 0;\n    while ((pos = input.find(',')) != string::npos) {\n        nums.push_back(stoi(input.substr(0, pos)));\n        input.erase(0, pos + 1);\n    }\n    nums.push_back(stoi(input));\n    Solution solution;\n    cout << solution.longestConsecutive(nums) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <vector>\n#include <unordered_set>\nusing namespace std;\n\nclass Solution {\npublic:\n    int longestConsecutive(vector<int>& nums) {\n        unordered_set<int> numSet(nums.begin(), nums.end());\n        int longestStreak = 0;\n\n        for (int num : numSet) {\n            if (numSet.find(num - 1) == numSet.end()) {\n                int currentNum = num;\n                int currentStreak = 1;\n\n                while (numSet.find(currentNum + 1) != numSet.end()) {\n                    currentNum += 1;\n                    currentStreak += 1;\n                }\n\n                longestStreak = max(longestStreak, currentStreak);\n            }\n        }\n\n        return longestStreak;\n    }\n};\n\nint main() {\n    string input;\n    getline(cin, input);\n    vector<int> nums;\n    size_t pos = 0;\n    while ((pos = input.find(',')) != string::npos) {\n        nums.push_back(stoi(input.substr(0, pos)));\n        input.erase(0, pos + 1);\n    }\n    nums.push_back(stoi(input));\n    Solution solution;\n    cout << solution.longestConsecutive(nums) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Add Binary",
    "description": `
### Description
Given two binary strings a and b, return their sum as a binary string.

### Example 1
**Input:** \`a = "11"\`, \`b = "1"\`
**Output:** \`"100"\`

### Example 2
**Input:** \`a = "1010"\`, \`b = "1011"\`
**Output:** \`"10101"\`

### Constraints
1 <= a.length, b.length <= 10^4
a and b consist only of '0' or '1' characters.
Each string does not contain leading zeros except for the zero itself.
    `,
    "difficulty": "Easy",
    "testCases": [
      { "input": "11,1", "output": "100" },
      { "input": "1010,1011", "output": "10101" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(',')\n    a, b = input_data[0], input_data[1]\n    print(Solution().addBinary(a, b))",
        "finalCode": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        return bin(int(a, 2) + int(b, 2))[2:]\n\nif __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(',')\n    a, b = input_data[0], input_data[1]\n    print(Solution().addBinary(a, b))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    addBinary(a, b) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(',');\n    const a = input[0];\n    const b = input[1];\n    console.log(new Solution().addBinary(a, b));\n});",
        "finalCode": "class Solution {\n    addBinary(a, b) {\n        const sum = BigInt('0b' + a) + BigInt('0b' + b);\n        return sum.toString(2);\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(',');\n    const a = input[0];\n    const b = input[1];\n    console.log(new Solution().addBinary(a, b));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public String addBinary(String a, String b) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\",\");\n        String a = parts[0];\n        String b = parts[1];\n        System.out.println(new Solution().addBinary(a, b));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public String addBinary(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        int i = a.length() - 1, j = b.length() - 1, carry = 0;\n        while (i >= 0 || j >= 0) {\n            int sum = carry;\n            if (i >= 0) sum += a.charAt(i--) - '0';\n            if (j >= 0) sum += b.charAt(j--) - '0';\n            result.append(sum % 2);\n            carry = sum / 2;\n        }\n        if (carry != 0) result.append(carry);\n        return result.reverse().toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\",\");\n        String a = parts[0];\n        String b = parts[1];\n        System.out.println(new Solution().addBinary(a, b));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    string addBinary(string a, string b) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    string input;\n    getline(cin, input);\n    size_t pos = input.find(',');\n    string a = input.substr(0, pos);\n    string b = input.substr(pos + 1);\n    Solution solution;\n    cout << solution.addBinary(a, b) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    string addBinary(string a, string b) {\n        string result = \"\";\n        int i = a.size() - 1, j = b.size() - 1, carry = 0;\n        while (i >= 0 || j >= 0) {\n            int sum = carry;\n            if (i >= 0) sum += a[i--] - '0';\n            if (j >= 0) sum += b[j--] - '0';\n            result += to_string(sum % 2);\n            carry = sum / 2;\n        }\n        if (carry != 0) result += to_string(carry);\n        reverse(result.begin(), result.end());\n        return result;\n    }\n};\n\nint main() {\n    string input;\n    getline(cin, input);\n    size_t pos = input.find(',');\n    string a = input.substr(0, pos);\n    string b = input.substr(pos + 1);\n    Solution solution;\n    cout << solution.addBinary(a, b) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Reverse Bits",
    "description": `
### Description
Reverse bits of a given 32 bits unsigned integer.

Note:

Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.
 
### Example 1
**Input:** \`n = 00000010100101000001111010011100\`
**Output:** \`964176192 (00111001011110000010100101000000)\`
**Explanation:** The input binary string \`00000010100101000001111010011100\` represents the unsigned integer 43261596, so return 964176192 which its binary representation is \`00111001011110000010100101000000\`.

### Example 2
**Input:** \`n = 11111111111111111111111111111101\`
**Output:** \`3221225471 (10111111111111111111111111111111)\`
**Explanation:** The input binary string \`11111111111111111111111111111101\` represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is \`10111111111111111111111111111111\`.

### Constraints
The input must be a binary string of length 32
    `,
    "difficulty": "Easy",
    "testCases": [
      { "input": "00000010100101000001111010011100", "output": "964176192" },
      { "input": "11111111111111111111111111111101", "output": "3221225471" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def reverseBits(self, n: int) -> int:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    n = int(sys.stdin.read().strip(), 2)\n    print(Solution().reverseBits(n))",
        "finalCode": "class Solution:\n    def reverseBits(self, n: int) -> int:\n        result = 0\n        for i in range(32):\n            result = (result << 1) | (n & 1)\n            n >>= 1\n        return result\n\nif __name__ == \"__main__\":\n    import sys\n    n = int(sys.stdin.read().strip(), 2)\n    print(Solution().reverseBits(n))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    reverseBits(n) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const n = parseInt(data.toString().trim(), 2);\n    console.log(new Solution().reverseBits(n));\n});",
        "finalCode": "class Solution {\n    reverseBits(n) {\n        let result = 0;\n        for (let i = 0; i < 32; i++) {\n            result = (result << 1) | (n & 1);\n            n >>= 1;\n        }\n        return result >>> 0;\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const n = parseInt(data.toString().trim(), 2);\n    console.log(new Solution().reverseBits(n));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    // you need treat n as an unsigned value\n    public int reverseBits(int n) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = Integer.parseUnsignedInt(scanner.nextLine(), 2);\n        System.out.println(new Solution().reverseBits(n));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    // you need treat n as an unsigned value\n    public int reverseBits(int n) {\n        int result = 0;\n        for (int i = 0; i < 32; i++) {\n            result = (result << 1) | (n & 1);\n            n >>>= 1;\n        }\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = Integer.parseUnsignedInt(scanner.nextLine(), 2);\n        System.out.println(new Solution().reverseBits(n));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    uint32_t reverseBits(uint32_t n) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    string input;\n    getline(cin, input);\n    uint32_t n = stoul(input, nullptr, 2);\n    Solution solution;\n    cout << solution.reverseBits(n) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    uint32_t reverseBits(uint32_t n) {\n        uint32_t result = 0;\n        for (int i = 0; i < 32; i++) {\n            result = (result << 1) | (n & 1);\n            n >>= 1;\n        }\n        return result;\n    }\n};\n\nint main() {\n    string input;\n    getline(cin, input);\n    uint32_t n = stoul(input, nullptr, 2);\n    Solution solution;\n    cout << solution.reverseBits(n) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Number of 1 Bits",
    "description": `
### Description
Given a positive integer n, write a function that returns the number of set bits in its binary representation (also known as the Hamming weight).

### Example 1
**Input:** \`n = 11\`
**Output:** \`3\`
**Explanation:** The input binary string \`1011\` has a total of three set bits.

### Example 2
**Input:** \`n = 128\`
**Output:** \`1\`
**Explanation:** The input binary string \`10000000\` has a total of one set bit.

### Example 3
**Input:** \`n = 2147483645\`
**Output:** \`30\`
**Explanation:** The input binary string \`1111111111111111111111111111101\` has a total of thirty set bits.

### Constraints
1 <= n <= 2^31 - 1
    `,
    "difficulty": "Easy",
    "testCases": [
      { "input": "11", "output": "3" },
      { "input": "128", "output": "1" },
      { "input": "2147483645", "output": "30" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def hammingWeight(self, n: int) -> int:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    n = int(sys.stdin.read().strip())\n    print(Solution().hammingWeight(n))",
        "finalCode": "class Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n\nif __name__ == \"__main__\":\n    import sys\n    n = int(sys.stdin.read().strip())\n    print(Solution().hammingWeight(n))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    hammingWeight(n) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const n = parseInt(data.toString().trim(), 10);\n    console.log(new Solution().hammingWeight(n));\n});",
        "finalCode": "class Solution {\n    hammingWeight(n) {\n        let count = 0;\n        while (n !== 0) {\n            count += n & 1;\n            n >>>= 1;\n        }\n        return count;\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const n = parseInt(data.toString().trim(), 10);\n    console.log(new Solution().hammingWeight(n));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public int hammingWeight(int n) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        System.out.println(new Solution().hammingWeight(n));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public int hammingWeight(int n) {\n        int count = 0;\n        while (n != 0) {\n            count += n & 1;\n            n >>>= 1;\n        }\n        return count;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        System.out.println(new Solution().hammingWeight(n));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\nusing namespace std;\n\nclass Solution {\npublic:\n    int hammingWeight(uint32_t n) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    uint32_t n;\n    cin >> n;\n    Solution solution;\n    cout << solution.hammingWeight(n) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\nusing namespace std;\n\nclass Solution {\npublic:\n    int hammingWeight(uint32_t n) {\n        int count = 0;\n        while (n) {\n            count += n & 1;\n            n >>= 1;\n        }\n        return count;\n    }\n};\n\nint main() {\n    uint32_t n;\n    cin >> n;\n    Solution solution;\n    cout << solution.hammingWeight(n) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Single Number",
    "description": `
### Description
Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

### Example 1
**Input:** \`nums = [2,2,1]\`
**Output:** \`1\`

### Example 2
**Input:** \`nums = [4,1,2,1,2]\`
**Output:** \`4\`

### Example 3
**Input:** \`nums = [1]\`
**Output:** \`1\`

### Constraints
1 <= nums.length <= 3 * 10^4
-3 * 10^4 <= nums[i] <= 3 * 10^4
Each element in the array appears twice except for one element which appears only once.
    `,
    "difficulty": "Easy",
    "testCases": [
      { "input": "2,2,1", "output": "1" },
      { "input": "4,1,2,1,2", "output": "4" },
      { "input": "1", "output": "1" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    input_data = list(map(int, sys.stdin.read().strip().split(',')))\n    print(Solution().singleNumber(input_data))",
        "finalCode": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        result = 0\n        for num in nums:\n            result ^= num\n        return result\n\nif __name__ == \"__main__\":\n    import sys\n    input_data = list(map(int, sys.stdin.read().strip().split(',')))\n    print(Solution().singleNumber(input_data))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    singleNumber(nums) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const nums = data.toString().trim().split(',').map(Number);\n    console.log(new Solution().singleNumber(nums));\n});",
        "finalCode": "class Solution {\n    singleNumber(nums) {\n        return nums.reduce((acc, num) => acc ^ num, 0);\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const nums = data.toString().trim().split(',').map(Number);\n    console.log(new Solution().singleNumber(nums));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public int singleNumber(int[] nums) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        int[] nums = Arrays.stream(input.split(\",\")).mapToInt(Integer::parseInt).toArray();\n        System.out.println(new Solution().singleNumber(nums));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public int singleNumber(int[] nums) {\n        int result = 0;\n        for (int num : nums) {\n            result ^= num;\n        }\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        int[] nums = Arrays.stream(input.split(\",\")).mapToInt(Integer::parseInt).toArray();\n        System.out.println(new Solution().singleNumber(nums));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    string input;\n    getline(cin, input);\n    vector<int> nums;\n    size_t pos = 0;\n    while ((pos = input.find(',')) != string::npos) {\n        nums.push_back(stoi(input.substr(0, pos)));\n        input.erase(0, pos + 1);\n    }\n    nums.push_back(stoi(input));\n    Solution solution;\n    cout << solution.singleNumber(nums) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        int result = 0;\n        for (int num : nums) {\n            result ^= num;\n        }\n        return result;\n    }\n};\n\nint main() {\n    string input;\n    getline(cin, input);\n    vector<int> nums;\n    size_t pos = 0;\n    while ((pos = input.find(',')) != string::npos) {\n        nums.push_back(stoi(input.substr(0, pos)));\n        input.erase(0, pos + 1);\n    }\n    nums.push_back(stoi(input));\n    Solution solution;\n    cout << solution.singleNumber(nums) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Single Number II",
    "description": `
### Description
Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.

You must implement a solution with a linear runtime complexity and use only constant extra space.

### Example 1
**Input:** \`nums = [2,2,3,2]\`
**Output:** \`3\`

### Example 2
**Input:** \`nums = [0,1,0,1,0,1,99]\`
**Output:** \`99\`

### Constraints
1 <= nums.length <= 3 * 10^4
-2^31 <= nums[i] <= 2^31 - 1
Each element in nums appears exactly three times except for one element which appears once.
    `,
    "difficulty": "Medium",
    "testCases": [
      { "input": "2,2,3,2", "output": "3" },
      { "input": "0,1,0,1,0,1,99", "output": "99" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    input_data = list(map(int, sys.stdin.read().strip().split(',')))\n    print(Solution().singleNumber(input_data))",
        "finalCode": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        ones, twos = 0, 0\n        for num in nums:\n            ones = (ones ^ num) & ~twos\n            twos = (twos ^ num) & ~ones\n        return ones\n\nif __name__ == \"__main__\":\n    import sys\n    input_data = list(map(int, sys.stdin.read().strip().split(',')))\n    print(Solution().singleNumber(input_data))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    singleNumber(nums) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const nums = data.toString().trim().split(',').map(Number);\n    console.log(new Solution().singleNumber(nums));\n});",
        "finalCode": "class Solution {\n    singleNumber(nums) {\n        let ones = 0, twos = 0;\n        for (const num of nums) {\n            ones = (ones ^ num) & ~twos;\n            twos = (twos ^ num) & ~ones;\n        }\n        return ones;\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const nums = data.toString().trim().split(',').map(Number);\n    console.log(new Solution().singleNumber(nums));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public int singleNumber(int[] nums) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        int[] nums = Arrays.stream(input.split(\",\")).mapToInt(Integer::parseInt).toArray();\n        System.out.println(new Solution().singleNumber(nums));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public int singleNumber(int[] nums) {\n        int ones = 0, twos = 0;\n        for (int num : nums) {\n            ones = (ones ^ num) & ~twos;\n            twos = (twos ^ num) & ~ones;\n        }\n        return ones;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        int[] nums = Arrays.stream(input.split(\",\")).mapToInt(Integer::parseInt).toArray();\n        System.out.println(new Solution().singleNumber(nums));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    string input;\n    getline(cin, input);\n    vector<int> nums;\n    size_t pos = 0;\n    while ((pos = input.find(',')) != string::npos) {\n        nums.push_back(stoi(input.substr(0, pos)));\n        input.erase(0, pos + 1);\n    }\n    nums.push_back(stoi(input));\n    Solution solution;\n    cout << solution.singleNumber(nums) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        int ones = 0, twos = 0;\n        for (int num : nums) {\n            ones = (ones ^ num) & ~twos;\n            twos = (twos ^ num) & ~ones;\n        }\n        return ones;\n    }\n};\n\nint main() {\n    string input;\n    getline(cin, input);\n    vector<int> nums;\n    size_t pos = 0;\n    while ((pos = input.find(',')) != string::npos) {\n        nums.push_back(stoi(input.substr(0, pos)));\n        input.erase(0, pos + 1);\n    }\n    nums.push_back(stoi(input));\n    Solution solution;\n    cout << solution.singleNumber(nums) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Bitwise AND of Numbers Range",
    "description": `
### Description
Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.

### Example 1
**Input:** \`left = 5, right = 7\`
**Output:** \`4\`

### Example 2
**Input:** \`left = 0, right = 0\`
**Output:** \`0\`

### Example 3
**Input:** \`left = 1, right = 2147483647\`
**Output:** \`0\`

### Constraints
0 <= left <= right <= 2^31 - 1
    `,
    "difficulty": "Medium",
    "testCases": [
      { "input": "5,7", "output": "4" },
      { "input": "0,0", "output": "0" },
      { "input": "1,2147483647", "output": "0" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def rangeBitwiseAnd(self, left: int, right: int) -> int:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    input_data = list(map(int, sys.stdin.read().strip().split(',')))\n    left, right = input_data[0], input_data[1]\n    print(Solution().rangeBitwiseAnd(left, right))",
        "finalCode": "class Solution:\n    def rangeBitwiseAnd(self, left: int, right: int) -> int:\n        while left < right:\n            right = right & (right - 1)\n        return right\n\nif __name__ == \"__main__\":\n    import sys\n    input_data = list(map(int, sys.stdin.read().strip().split(',')))\n    left, right = input_data[0], input_data[1]\n    print(Solution().rangeBitwiseAnd(left, right))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    rangeBitwiseAnd(left, right) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const [left, right] = data.toString().trim().split(',').map(Number);\n    console.log(new Solution().rangeBitwiseAnd(left, right));\n});",
        "finalCode": "class Solution {\n    rangeBitwiseAnd(left, right) {\n        while (left < right) {\n            right = right & (right - 1);\n        }\n        return right;\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const [left, right] = data.toString().trim().split(',').map(Number);\n    console.log(new Solution().rangeBitwiseAnd(left, right));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public int rangeBitwiseAnd(int left, int right) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\",\");\n        int left = Integer.parseInt(parts[0]);\n        int right = Integer.parseInt(parts[1]);\n        System.out.println(new Solution().rangeBitwiseAnd(left, right));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public int rangeBitwiseAnd(int left, int right) {\n        while (left < right) {\n            right = right & (right - 1);\n        }\n        return right;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\",\");\n        int left = Integer.parseInt(parts[0]);\n        int right = Integer.parseInt(parts[1]);\n        System.out.println(new Solution().rangeBitwiseAnd(left, right));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\nusing namespace std;\n\nclass Solution {\npublic:\n    int rangeBitwiseAnd(int left, int right) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    int left, right;\n    char comma;\n    cin >> left >> comma >> right;\n    Solution solution;\n    cout << solution.rangeBitwiseAnd(left, right) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\nusing namespace std;\n\nclass Solution {\npublic:\n    int rangeBitwiseAnd(int left, int right) {\n        while (left < right) {\n            right = right & (right - 1);\n        }\n        return right;\n    }\n};\n\nint main() {\n    int left, right;\n    char comma;\n    cin >> left >> comma >> right;\n    Solution solution;\n    cout << solution.rangeBitwiseAnd(left, right) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Plus One",
    "description": `
### Description
You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.

### Example 1
**Input:** \`digits = [1,2,3]\`
**Output:** \`[1,2,4]\`
**Explanation:** The array represents the integer 123. Incrementing by one gives 123 + 1 = 124. Thus, the result should be [1,2,4].

### Example 2
**Input:** \`digits = [4,3,2,1]\`
**Output:** \`[4,3,2,2]\`
**Explanation:** The array represents the integer 4321. Incrementing by one gives 4321 + 1 = 4322. Thus, the result should be [4,3,2,2].

### Example 3
**Input:** \`digits = [9]\`
**Output:** \`[1,0]\`
**Explanation:** The array represents the integer 9. Incrementing by one gives 9 + 1 = 10. Thus, the result should be [1,0].

### Constraints
1 <= digits.length <= 100
0 <= digits[i] <= 9
digits does not contain any leading 0's.
    `,
    "difficulty": "Easy",
    "testCases": [
      { "input": "1,2,3", "output": "[1,2,4]" },
      { "input": "4,3,2,1", "output": "[4,3,2,2]" },
      { "input": "9", "output": "[1,0]" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    input_data = list(map(int, sys.stdin.read().strip().split(',')))\n    print(Solution().plusOne(input_data))",
        "finalCode": "class Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:\n        for i in range(len(digits) - 1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits\n\nif __name__ == \"__main__\":\n    import sys\n    input_data = list(map(int, sys.stdin.read().strip().split(',')))\n    print(Solution().plusOne(input_data))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    plusOne(digits) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const digits = data.toString().trim().split(',').map(Number);\n    console.log(new Solution().plusOne(digits));\n});",
        "finalCode": "class Solution {\n    plusOne(digits) {\n        for (let i = digits.length - 1; i >= 0; i--) {\n            if (digits[i] < 9) {\n                digits[i] += 1;\n                return digits;\n            }\n            digits[i] = 0;\n        }\n        return [1, ...digits];\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const digits = data.toString().trim().split(',').map(Number);\n    console.log(new Solution().plusOne(digits));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public int[] plusOne(int[] digits) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        int[] digits = Arrays.stream(input.split(\",\")).mapToInt(Integer::parseInt).toArray();\n        System.out.println(Arrays.toString(new Solution().plusOne(digits)));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public int[] plusOne(int[] digits) {\n        for (int i = digits.length - 1; i >= 0; i--) {\n            if (digits[i] < 9) {\n                digits[i] += 1;\n                return digits;\n            }\n            digits[i] = 0;\n        }\n        int[] newDigits = new int[digits.length + 1];\n        newDigits[0] = 1;\n        return newDigits;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        int[] digits = Arrays.stream(input.split(\",\")).mapToInt(Integer::parseInt).toArray();\n        System.out.println(Arrays.toString(new Solution().plusOne(digits)));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    string input;\n    getline(cin, input);\n    vector<int> digits;\n    size_t pos = 0;\n    while ((pos = input.find(',')) != string::npos) {\n        digits.push_back(stoi(input.substr(0, pos)));\n        input.erase(0, pos + 1);\n    }\n    digits.push_back(stoi(input));\n    Solution solution;\n    vector<int> result = solution.plusOne(digits);\n    for (int num : result) {\n        cout << num << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        for (int i = digits.size() - 1; i >= 0; i--) {\n            if (digits[i] < 9) {\n                digits[i] += 1;\n                return digits;\n            }\n            digits[i] = 0;\n        }\n        digits.insert(digits.begin(), 1);\n        return digits;\n    }\n};\n\nint main() {\n    string input;\n    getline(cin, input);\n    vector<int> digits;\n    size_t pos = 0;\n    while ((pos = input.find(',')) != string::npos) {\n        digits.push_back(stoi(input.substr(0, pos)));\n        input.erase(0, pos + 1);\n    }\n    digits.push_back(stoi(input));\n    Solution solution;\n    vector<int> result = solution.plusOne(digits);\n    for (int num : result) {\n        cout << num << \" \";\n    }\n    cout << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Factorial Trailing Zeroes",
    "description": `
### Description
Given an integer n, return the number of trailing zeroes in n!.

Note that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1.

### Example 1
**Input:** \`n = 3\`
**Output:** \`0\`
**Explanation:** 3! = 6, no trailing zero.

### Example 2
**Input:** \`n = 5\`
**Output:** \`1\`
**Explanation:** 5! = 120, one trailing zero.

### Example 3
**Input:** \`n = 0\`
**Output:** \`0\`

### Constraints
0 <= n <= 10^4
    `,
    "difficulty": "Medium",
    "testCases": [
      { "input": "3", "output": "0" },
      { "input": "5", "output": "1" },
      { "input": "0", "output": "0" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def trailingZeroes(self, n: int) -> int:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    n = int(sys.stdin.read().strip())\n    print(Solution().trailingZeroes(n))",
        "finalCode": "class Solution:\n    def trailingZeroes(self, n: int) -> int:\n        count = 0\n        while n >= 5:\n            n //= 5\n            count += n\n        return count\n\nif __name__ == \"__main__\":\n    import sys\n    n = int(sys.stdin.read().strip())\n    print(Solution().trailingZeroes(n))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    trailingZeroes(n) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const n = parseInt(data.toString().trim(), 10);\n    console.log(new Solution().trailingZeroes(n));\n});",
        "finalCode": "class Solution {\n    trailingZeroes(n) {\n        let count = 0;\n        while (n >= 5) {\n            n = Math.floor(n / 5);\n            count += n;\n        }\n        return count;\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const n = parseInt(data.toString().trim(), 10);\n    console.log(new Solution().trailingZeroes(n));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public int trailingZeroes(int n) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        System.out.println(new Solution().trailingZeroes(n));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public int trailingZeroes(int n) {\n        int count = 0;\n        while (n >= 5) {\n            n /= 5;\n            count += n;\n        }\n        return count;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        System.out.println(new Solution().trailingZeroes(n));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\nusing namespace std;\n\nclass Solution {\npublic:\n    int trailingZeroes(int n) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    int n;\n    cin >> n;\n    Solution solution;\n    cout << solution.trailingZeroes(n) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\nusing namespace std;\n\nclass Solution {\npublic:\n    int trailingZeroes(int n) {\n        int count = 0;\n        while (n >= 5) {\n            n /= 5;\n            count += n;\n        }\n        return count;\n    }\n};\n\nint main() {\n    int n;\n    cin >> n;\n    Solution solution;\n    cout << solution.trailingZeroes(n) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Sqrt(x)",
    "description": `
### Description
Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.

You must not use any built-in exponent function or operator.

For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.

### Example 1
**Input:** \`x = 4\`
**Output:** \`2\`
**Explanation:** The square root of 4 is 2, so we return 2.

### Example 2
**Input:** \`x = 8\`
**Output:** \`2\`
**Explanation:** The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.

### Constraints
0 <= x <= 2^31 - 1
    `,
    "difficulty": "Easy",
    "testCases": [
      { "input": "4", "output": "2" },
      { "input": "8", "output": "2" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    x = int(sys.stdin.read().strip())\n    print(Solution().mySqrt(x))",
        "finalCode": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        if x == 0:\n            return 0\n        left, right = 1, x\n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return right\n\nif __name__ == \"__main__\":\n    import sys\n    x = int(sys.stdin.read().strip())\n    print(Solution().mySqrt(x))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    mySqrt(x) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const x = parseInt(data.toString().trim(), 10);\n    console.log(new Solution().mySqrt(x));\n});",
        "finalCode": "class Solution {\n    mySqrt(x) {\n        if (x === 0) return 0;\n        let left = 1, right = x;\n        while (left <= right) {\n            const mid = Math.floor((left + right) / 2);\n            if (mid * mid === x) return mid;\n            else if (mid * mid < x) left = mid + 1;\n            else right = mid - 1;\n        }\n        return right;\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const x = parseInt(data.toString().trim(), 10);\n    console.log(new Solution().mySqrt(x));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public int mySqrt(int x) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int x = scanner.nextInt();\n        System.out.println(new Solution().mySqrt(x));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public int mySqrt(int x) {\n        if (x == 0) return 0;\n        int left = 1, right = x;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (mid == x / mid) return mid;\n            else if (mid < x / mid) left = mid + 1;\n            else right = mid - 1;\n        }\n        return right;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int x = scanner.nextInt();\n        System.out.println(new Solution().mySqrt(x));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\nusing namespace std;\n\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    int x;\n    cin >> x;\n    Solution solution;\n    cout << solution.mySqrt(x) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\nusing namespace std;\n\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        if (x == 0) return 0;\n        int left = 1, right = x;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (mid == x / mid) return mid;\n            else if (mid < x / mid) left = mid + 1;\n            else right = mid - 1;\n        }\n        return right;\n    }\n};\n\nint main() {\n    int x;\n    cin >> x;\n    Solution solution;\n    cout << solution.mySqrt(x) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Pow(x, n)",
    "description": `
### Description
Implement pow(x, n), which calculates x raised to the power n (i.e., x^n).

### Example 1
**Input:** \`x = 2.00000, n = 10\`
**Output:** \`1024.00000\`

### Example 2
**Input:** \`x = 2.10000, n = 3\`
**Output:** \`9.26100\`

### Example 3
**Input:** \`x = 2.00000, n = -2\`
**Output:** \`0.25000\`
**Explanation:** 2^-2 = 1/2^2 = 1/4 = 0.25

### Constraints
-100.0 < x < 100.0
-2^31 <= n <= 2^31 - 1
n is an integer.
Either x is not zero or n > 0.
-10^4 <= x^n <= 10^4
    `,
    "difficulty": "Medium",
    "testCases": [
      { "input": "2.00000,10", "output": "1024.00000" },
      { "input": "2.10000,3", "output": "9.26100" },
      { "input": "2.00000,-2", "output": "0.25000" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def myPow(self, x: float, n: int) -> float:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(',')\n    x = float(input_data[0])\n    n = int(input_data[1])\n    print(Solution().myPow(x, n))",
        "finalCode": "class Solution:\n    def myPow(self, x: float, n: int) -> float:\n        if n == 0:\n            return 1.0\n        if n < 0:\n            x = 1 / x\n            n = -n\n        result = 1.0\n        while n:\n            if n % 2:\n                result *= x\n            x *= x\n            n //= 2\n        return result\n\nif __name__ == \"__main__\":\n    import sys\n    input_data = sys.stdin.read().strip().split(',')\n    x = float(input_data[0])\n    n = int(input_data[1])\n    print(Solution().myPow(x, n))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    myPow(x, n) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(',');\n    const x = parseFloat(input[0]);\n    const n = parseInt(input[1], 10);\n    console.log(new Solution().myPow(x, n));\n});",
        "finalCode": "class Solution {\n    myPow(x, n) {\n        if (n === 0) return 1.0;\n        if (n < 0) {\n            x = 1 / x;\n            n = -n;\n        }\n        let result = 1.0;\n        while (n) {\n            if (n % 2) result *= x;\n            x *= x;\n            n = Math.floor(n / 2);\n        }\n        return result;\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const input = data.toString().trim().split(',');\n    const x = parseFloat(input[0]);\n    const n = parseInt(input[1], 10);\n    console.log(new Solution().myPow(x, n));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public double myPow(double x, int n) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\",\");\n        double x = Double.parseDouble(parts[0]);\n        int n = Integer.parseInt(parts[1]);\n        System.out.println(new Solution().myPow(x, n));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public double myPow(double x, int n) {\n        if (n == 0) return 1.0;\n        if (n < 0) {\n            x = 1 / x;\n            n = -n;\n        }\n        double result = 1.0;\n        while (n != 0) {\n            if (n % 2 != 0) result *= x;\n            x *= x;\n            n /= 2;\n        }\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\",\");\n        double x = Double.parseDouble(parts[0]);\n        int n = Integer.parseInt(parts[1]);\n        System.out.println(new Solution().myPow(x, n));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\nusing namespace std;\n\nclass Solution {\npublic:\n    double myPow(double x, int n) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    double x;\n    int n;\n    char comma;\n    cin >> x >> comma >> n;\n    Solution solution;\n    cout << solution.myPow(x, n) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\nusing namespace std;\n\nclass Solution {\npublic:\n    double myPow(double x, int n) {\n        if (n == 0) return 1.0;\n        if (n < 0) {\n            x = 1 / x;\n            n = -n;\n        }\n        double result = 1.0;\n        while (n != 0) {\n            if (n % 2 != 0) result *= x;\n            x *= x;\n            n /= 2;\n        }\n        return result;\n    }\n};\n\nint main() {\n    double x;\n    int n;\n    char comma;\n    cin >> x >> comma >> n;\n    Solution solution;\n    cout << solution.myPow(x, n) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Max Points on a Line",
    "description": `
### Description
Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.

### Example 1
**Input:** \`points = [[1,1],[2,2],[3,3]]\`
**Output:** \`3\`

### Example 2
**Input:** \`points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\`
**Output:** \`4\`

### Constraints
1 <= points.length <= 300
points[i].length == 2
-10^4 <= xi, yi <= 10^4
All the points are unique.
    `,
   "difficulty": "Hard",
    "testCases": [
      { "input": "[[1,1],[2,2],[3,3]]", "output": "3" },
      { "input": "[[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]", "output": "4" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    import json\n    points = json.loads(sys.stdin.read().strip())\n    print(Solution().maxPoints(points))",
        "finalCode": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        from collections import defaultdict\n        def gcd(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        n = len(points)\n        if n < 3:\n            return n\n        max_points = 1\n        for i in range(n):\n            slopes = defaultdict(int)\n            for j in range(i + 1, n):\n                dx = points[j][0] - points[i][0]\n                dy = points[j][1] - points[i][1]\n                g = gcd(dx, dy)\n                slope = (dx // g, dy // g)\n                slopes[slope] += 1\n                max_points = max(max_points, slopes[slope] + 1)\n        return max_points\n\nif __name__ == \"__main__\":\n    import sys\n    import json\n    points = json.loads(sys.stdin.read().strip())\n    print(Solution().maxPoints(points))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    maxPoints(points) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const points = JSON.parse(data.toString().trim());\n    console.log(new Solution().maxPoints(points));\n});",
        "finalCode": "class Solution {\n    maxPoints(points) {\n        const gcd = (a, b) => b === 0 ? a : gcd(b, a % b);\n        const n = points.length;\n        if (n < 3) return n;\n        let maxPoints = 1;\n        for (let i = 0; i < n; i++) {\n            const slopes = new Map();\n            for (let j = i + 1; j < n; j++) {\n                let dx = points[j][0] - points[i][0];\n                let dy = points[j][1] - points[i][1];\n                const g = gcd(dx, dy);\n                dx /= g;\n                dy /= g;\n                const slope = `${dx}/${dy}`;\n                slopes.set(slope, (slopes.get(slope) || 0) + 1);\n                maxPoints = Math.max(maxPoints, slopes.get(slope) + 1);\n            }\n        }\n        return maxPoints;\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const points = JSON.parse(data.toString().trim());\n    console.log(new Solution().maxPoints(points));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public int maxPoints(int[][] points) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        input = input.replaceAll(\"\\[\", \"{\").replaceAll(\"\\]\", \"}\");\n        int[][] points = new Gson().fromJson(input, int[][].class);\n        System.out.println(new Solution().maxPoints(points));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    private int gcd(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n\n    public int maxPoints(int[][] points) {\n        int n = points.length;\n        if (n < 3) return n;\n        int maxPoints = 1;\n        for (int i = 0; i < n; i++) {\n            Map<String, Integer> slopes = new HashMap<>();\n            for (int j = i + 1; j < n; j++) {\n                int dx = points[j][0] - points[i][0];\n                int dy = points[j][1] - points[i][1];\n                int g = gcd(dx, dy);\n                dx /= g;\n                dy /= g;\n                String slope = dx + \"/\" + dy;\n                slopes.put(slope, slopes.getOrDefault(slope, 0) + 1);\n                maxPoints = Math.max(maxPoints, slopes.get(slope) + 1);\n            }\n        }\n        return maxPoints;\n    }\n}\n\nimport java.util.*;\nimport com.google.gson.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        input = input.replaceAll(\"\\[\", \"{\").replaceAll(\"\\]\", \"}\");\n        int[][] points = new Gson().fromJson(input, int[][].class);\n        System.out.println(new Solution().maxPoints(points));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxPoints(vector<vector<int>>& points) {\n        \n    }\n};",
        "stdInRetrievalCode": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\nusing namespace std;\n\nvector<vector<int>> parseInput(string input) {\n    vector<vector<int>> points;\n    input = input.substr(1, input.size() - 2);\n    stringstream ss(input);\n    string point;\n    while (getline(ss, point, ']')) {\n        if (point[0] == ',') point = point.substr(2);\n        point = point.substr(1);\n        stringstream ps(point);\n        string coord;\n        vector<int> coords;\n        while (getline(ps, coord, ',')) {\n            coords.push_back(stoi(coord));\n        }\n        points.push_back(coords);\n    }\n    return points;\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n    vector<vector<int>> points = parseInput(input);\n    Solution solution;\n    cout << solution.maxPoints(points) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    int gcd(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n\n    int maxPoints(vector<vector<int>>& points) {\n        int n = points.size();\n        if (n < 3) return n;\n        int maxPoints = 1;\n        for (int i = 0; i < n; i++) {\n            unordered_map<string, int> slopes;\n            for (int j = i + 1; j < n; j++) {\n                int dx = points[j][0] - points[i][0];\n                int dy = points[j][1] - points[i][1];\n                int g = gcd(dx, dy);\n                dx /= g;\n                dy /= g;\n                string slope = to_string(dx) + \"/\" + to_string(dy);\n                slopes[slope]++;\n                maxPoints = max(maxPoints, slopes[slope] + 1);\n            }\n        }\n        return maxPoints;\n    }\n};\n\nvector<vector<int>> parseInput(string input) {\n    vector<vector<int>> points;\n    input = input.substr(1, input.size() - 2);\n    stringstream ss(input);\n    string point;\n    while (getline(ss, point, ']')) {\n        if (point[0] == ',') point = point.substr(2);\n        point = point.substr(1);\n        stringstream ps(point);\n        string coord;\n        vector<int> coords;\n        while (getline(ps, coord, ',')) {\n            coords.push_back(stoi(coord));\n        }\n        points.push_back(coords);\n    }\n    return points;\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n    vector<vector<int>> points = parseInput(input);\n    Solution solution;\n    cout << solution.maxPoints(points) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Valid Parentheses",
    "description": `
### Description
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:
- Open brackets must be closed by the same type of brackets.
- Open brackets must be closed in the correct order.
- Every close bracket has a corresponding open bracket of the same type.

### Example 1
**Input:** \`s = "()"\`
**Output:** \`true\`

### Example 2
**Input:** \`s = "()[]{}"\`
**Output:** \`true\`

### Example 3
**Input:** \`s = "(]"\`
**Output:** \`false\`

### Example 4
**Input:** \`s = "([])"\`
**Output:** \`true\`

### Constraints
1 <= s.length <= 10^4
s consists of parentheses only '()[]{}'.
    `,
    "difficulty": "Easy",
    "testCases": [
      { "input": "\"()\"", "output": "true" },
      { "input": "\"()[]{}\"", "output": "true" },
      { "input": "\"(]\"", "output": "false" },
      { "input": "\"([])\"", "output": "true" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def isValid(self, s: str) -> bool:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    s = sys.stdin.read().strip()\n    print(Solution().isValid(s))",
        "finalCode": "class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {')': '(', '}': '{', ']': '['}\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n        return not stack\n\nif __name__ == \"__main__\":\n    import sys\n    s = sys.stdin.read().strip()\n    print(Solution().isValid(s))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    isValid(s) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const s = data.toString().trim();\n    console.log(new Solution().isValid(s));\n});",
        "finalCode": "class Solution {\n    isValid(s) {\n        const stack = [];\n        const mapping = {')': '(', '}': '{', ']': '['};\n        for (const char of s) {\n            if (mapping[char]) {\n                const topElement = stack.length ? stack.pop() : '#';\n                if (mapping[char] !== topElement) {\n                    return false;\n                }\n            } else {\n                stack.push(char);\n            }\n        }\n        return stack.length === 0;\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const s = data.toString().trim();\n    console.log(new Solution().isValid(s));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public boolean isValid(String s) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String s = scanner.nextLine();\n        System.out.println(new Solution().isValid(s));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public boolean isValid(String s) {\n        Stack<Character> stack = new Stack<>();\n        Map<Character, Character> mapping = new HashMap<>();\n        mapping.put(')', '(');\n        mapping.put('}', '{');\n        mapping.put(']', '[');\n        for (char c : s.toCharArray()) {\n            if (mapping.containsKey(c)) {\n                char topElement = stack.empty() ? '#' : stack.pop();\n                if (topElement != mapping.get(c)) {\n                    return false;\n                }\n            } else {\n                stack.push(c);\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String s = scanner.nextLine();\n        System.out.println(new Solution().isValid(s));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <stack>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool isValid(string s) {\n        \n    }\n};",
        "stdInRetrievalCode": "int main() {\n    string s;\n    getline(cin, s);\n    Solution solution;\n    cout << solution.isValid(s) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <stack>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> stack;\n        unordered_map<char, char> mapping = {{')', '('}, {'}', '{'}, {']', '['}};\n        for (char c : s) {\n            if (mapping.count(c)) {\n                char topElement = stack.empty() ? '#' : stack.top();\n                stack.pop();\n                if (topElement != mapping[c]) {\n                    return false;\n                }\n            } else {\n                stack.push(c);\n            }\n        }\n        return stack.empty();\n    }\n};\n\nint main() {\n    string s;\n    getline(cin, s);\n    Solution solution;\n    cout << solution.isValid(s) << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Min Stack",
    "description": `
### Description
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the MinStack class:
- MinStack() initializes the stack object.
- void push(int val) pushes the element val onto the stack.
- void pop() removes the element on the top of the stack.
- int top() gets the top element of the stack.
- int getMin() retrieves the minimum element in the stack.

You must implement a solution with O(1) time complexity for each function.

### Example 1
**Input:** \`["MinStack","push","push","push","getMin","pop","top","getMin"]\`
**Output:** \`[null,null,null,null,-3,null,0,-2]\`
**Explanation:** 
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2

### Constraints
-2^31 <= val <= 2^31 - 1
Methods pop, top and getMin operations will always be called on non-empty stacks.
At most 3 * 10^4 calls will be made to push, pop, top, and getMin.
    `,
    "difficulty": "Medium",
    "testCases": [
      { "input": "[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]", "output": "[null,null,null,null,-3,null,0,-2]" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class MinStack:\n\n    def __init__(self):\n        pass\n\n    def push(self, val: int) -> None:\n        pass\n\n    def pop(self) -> None:\n        pass\n\n    def top(self) -> int:\n        pass\n\n    def getMin(self) -> int:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    import json\n    input_data = json.loads(sys.stdin.read().strip())\n    commands = input_data[0]\n    values = input_data[1]\n    obj = MinStack()\n    result = []\n    for i, command in enumerate(commands):\n        if command == \"MinStack\":\n            result.append(None)\n        elif command == \"push\":\n            obj.push(values[i][0])\n            result.append(None)\n        elif command == \"pop\":\n            obj.pop()\n            result.append(None)\n        elif command == \"top\":\n            result.append(obj.top())\n        elif command == \"getMin\":\n            result.append(obj.getMin())\n    print(result)",
        "finalCode": "class MinStack:\n\n    def __init__(self):\n        self.stack = []\n        self.min_stack = []\n\n    def push(self, val: int) -> None:\n        self.stack.append(val)\n        if not self.min_stack or val <= self.min_stack[-1]:\n            self.min_stack.append(val)\n\n    def pop(self) -> None:\n        if self.stack:\n            if self.stack[-1] == self.min_stack[-1]:\n                self.min_stack.pop()\n            self.stack.pop()\n\n    def top(self) -> int:\n        return self.stack[-1] if self.stack else None\n\n    def getMin(self) -> int:\n        return self.min_stack[-1] if self.min_stack else None\n\nif __name__ == \"__main__\":\n    import sys\n    import json\n    input_data = json.loads(sys.stdin.read().strip())\n    commands = input_data[0]\n    values = input_data[1]\n    obj = MinStack()\n    result = []\n    for i, command in enumerate(commands):\n        if command == \"MinStack\":\n            result.append(None)\n        elif command == \"push\":\n            obj.push(values[i][0])\n            result.append(None)\n        elif command == \"pop\":\n            obj.pop()\n            result.append(None)\n        elif command == \"top\":\n            result.append(obj.top())\n        elif command == \"getMin\":\n            result.append(obj.getMin())\n    print(result)"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class MinStack {\n\n    constructor() {\n        \n    }\n\n    push(val) {\n        \n    }\n\n    pop() {\n        \n    }\n\n    top() {\n        \n    }\n\n    getMin() {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const input = JSON.parse(data.toString().trim());\n    const commands = input[0];\n    const values = input[1];\n    const obj = new MinStack();\n    const result = [];\n    commands.forEach((command, i) => {\n        if (command === \"MinStack\") {\n            result.push(null);\n        } else if (command === \"push\") {\n            obj.push(values[i][0]);\n            result.push(null);\n        } else if (command === \"pop\") {\n            obj.pop();\n            result.push(null);\n        } else if (command === \"top\") {\n            result.push(obj.top());\n        } else if (command === \"getMin\") {\n            result.push(obj.getMin());\n        }\n    });\n    console.log(result);\n});",
        "finalCode": "class MinStack {\n\n    constructor() {\n        this.stack = [];\n        this.minStack = [];\n    }\n\n    push(val) {\n        this.stack.push(val);\n        if (this.minStack.length === 0 || val <= this.minStack[this.minStack.length - 1]) {\n            this.minStack.push(val);\n        }\n    }\n\n    pop() {\n        if (this.stack.length) {\n            if (this.stack[this.stack.length - 1] === this.minStack[this.minStack.length - 1]) {\n                this.minStack.pop();\n            }\n            this.stack.pop();\n        }\n    }\n\n    top() {\n        return this.stack[this.stack.length - 1];\n    }\n\n    getMin() {\n        return this.minStack[this.minStack.length - 1];\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const input = JSON.parse(data.toString().trim());\n    const commands = input[0];\n    const values = input[1];\n    const obj = new MinStack();\n    const result = [];\n    commands.forEach((command, i) => {\n        if (command === \"MinStack\") {\n            result.push(null);\n        } else if (command === \"push\") {\n            obj.push(values[i][0]);\n            result.push(null);\n        } else if (command === \"pop\") {\n            obj.pop();\n            result.push(null);\n        } else if (command === \"top\") {\n            result.push(obj.top());\n        } else if (command === \"getMin\") {\n            result.push(obj.getMin());\n        }\n    });\n    console.log(result);\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass MinStack {\n\n    public MinStack() {\n        \n    }\n\n    public void push(int val) {\n        \n    }\n\n    public void pop() {\n        \n    }\n\n    public int top() {\n        \n    }\n\n    public int getMin() {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\"\\n\");\n        String[] commands = parts[0].replaceAll(\"\\[|\\]|\\\"\", \"\").split(\",\");\n        String[] values = parts[1].replaceAll(\"\\[|\\]\", \"\").split(\",\");\n        MinStack obj = new MinStack();\n        List<Object> result = new ArrayList<>();\n        for (int i = 0; i < commands.length; i++) {\n            switch (commands[i]) {\n                case \"MinStack\":\n                    result.add(null);\n                    break;\n                case \"push\":\n                    obj.push(Integer.parseInt(values[i]));\n                    result.add(null);\n                    break;\n                case \"pop\":\n                    obj.pop();\n                    result.add(null);\n                    break;\n                case \"top\":\n                    result.add(obj.top());\n                    break;\n                case \"getMin\":\n                    result.add(obj.getMin());\n                    break;\n            }\n        }\n        System.out.println(result);\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass MinStack {\n    private Stack<Integer> stack;\n    private Stack<Integer> minStack;\n\n    public MinStack() {\n        stack = new Stack<>();\n        minStack = new Stack<>();\n    }\n\n    public void push(int val) {\n        stack.push(val);\n        if (minStack.isEmpty() || val <= minStack.peek()) {\n            minStack.push(val);\n        }\n    }\n\n    public void pop() {\n        if (!stack.isEmpty()) {\n            if (stack.peek().equals(minStack.peek())) {\n                minStack.pop();\n            }\n            stack.pop();\n        }\n    }\n\n    public int top() {\n        return stack.peek();\n    }\n\n    public int getMin() {\n        return minStack.peek();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] parts = input.split(\"\\n\");\n        String[] commands = parts[0].replaceAll(\"\\[|\\]|\\\"\", \"\").split(\",\");\n        String[] values = parts[1].replaceAll(\"\\[|\\]\", \"\").split(\",\");\n        MinStack obj = new MinStack();\n        List<Object> result = new ArrayList<>();\n        for (int i = 0; i < commands.length; i++) {\n            switch (commands[i]) {\n                case \"MinStack\":\n                    result.add(null);\n                    break;\n                case \"push\":\n                    obj.push(Integer.parseInt(values[i]));\n                    result.add(null);\n                    break;\n                case \"pop\":\n                    obj.pop();\n                    result.add(null);\n                    break;\n                case \"top\":\n                    result.add(obj.top());\n                    break;\n                case \"getMin\":\n                    result.add(obj.getMin());\n                    break;\n            }\n        }\n        System.out.println(result);\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <stack>\nusing namespace std;\n\nclass MinStack {\npublic:\n    MinStack() {\n        \n    }\n\n    void push(int val) {\n        \n    }\n\n    void pop() {\n        \n    }\n\n    int top() {\n        \n    }\n\n    int getMin() {\n        \n    }\n};",
        "stdInRetrievalCode": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\nusing namespace std;\n\nvector<string> split(const string &s, char delimiter) {\n    vector<string> tokens;\n    string token;\n    istringstream tokenStream(s);\n    while (getline(tokenStream, token, delimiter)) {\n        tokens.push_back(token);\n    }\n    return tokens;\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n    vector<string> parts = split(input, '\\n');\n    vector<string> commands = split(parts[0].substr(1, parts[0].size() - 2), ',');\n    vector<string> values = split(parts[1].substr(1, parts[1].size() - 2), ',');\n    MinStack obj;\n    vector<string> result;\n    for (size_t i = 0; i < commands.size(); ++i) {\n        if (commands[i] == \"MinStack\") {\n            result.push_back(\"null\");\n        } else if (commands[i] == \"push\") {\n            obj.push(stoi(values[i]));\n            result.push_back(\"null\");\n        } else if (commands[i] == \"pop\") {\n            obj.pop();\n            result.push_back(\"null\");\n        } else if (commands[i] == \"top\") {\n            result.push_back(to_string(obj.top()));\n        } else if (commands[i] == \"getMin\") {\n            result.push_back(to_string(obj.getMin()));\n        }\n    }\n    for (const string &res : result) {\n        cout << res << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <stack>\nusing namespace std;\n\nclass MinStack {\npublic:\n    stack<int> s;\n    stack<int> minStack;\n\n    MinStack() {\n    }\n\n    void push(int val) {\n        s.push(val);\n        if (minStack.empty() || val <= minStack.top()) {\n            minStack.push(val);\n        }\n    }\n\n    void pop() {\n        if (s.top() == minStack.top()) {\n            minStack.pop();\n        }\n        s.pop();\n    }\n\n    int top() {\n        return s.top();\n    }\n\n    int getMin() {\n        return minStack.top();\n    }\n};\n\nvector<string> split(const string &s, char delimiter) {\n    vector<string> tokens;\n    string token;\n    istringstream tokenStream(s);\n    while (getline(tokenStream, token, delimiter)) {\n        tokens.push_back(token);\n    }\n    return tokens;\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n    vector<string> parts = split(input, '\\n');\n    vector<string> commands = split(parts[0].substr(1, parts[0].size() - 2), ',');\n    vector<string> values = split(parts[1].substr(1, parts[1].size() - 2), ',');\n    MinStack obj;\n    vector<string> result;\n    for (size_t i = 0; i < commands.size(); ++i) {\n        if (commands[i] == \"MinStack\") {\n            result.push_back(\"null\");\n        } else if (commands[i] == \"push\") {\n            obj.push(stoi(values[i]));\n            result.push_back(\"null\");\n        } else if (commands[i] == \"pop\") {\n            obj.pop();\n            result.push_back(\"null\");\n        } else if (commands[i] == \"top\") {\n            result.push_back(to_string(obj.top()));\n        } else if (commands[i] == \"getMin\") {\n            result.push_back(to_string(obj.getMin()));\n        }\n    }\n    for (const string &res : result) {\n        cout << res << \" \";\n    }\n    cout << endl;\n    return 0;\n}"
      }
    ]
  },
  {
    "title": "Evaluate Reverse Polish Notation",
    "description": `
### Description
You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.

Evaluate the expression. Return an integer that represents the value of the expression.

Note that:
- The valid operators are '+', '-', '*', and '/'.
- Each operand may be an integer or another expression.
- The division between two integers always truncates toward zero.
- There will not be any division by zero.
- The input represents a valid arithmetic expression in a reverse polish notation.
- The answer and all the intermediate calculations can be represented in a 32-bit integer.

### Example 1
**Input:** \`tokens = ["2","1","+","3","*"]\`
**Output:** \`9\`
**Explanation:** ((2 + 1) * 3) = 9

### Example 2
**Input:** \`tokens = ["4","13","5","/","+"]\`
**Output:** \`6\`
**Explanation:** (4 + (13 / 5)) = 6

### Example 3
**Input:** \`tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]\`
**Output:** \`22\`
**Explanation:** ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22

### Constraints
1 <= tokens.length <= 10^4
tokens[i] is either an operator: "+", "-", "*", or "/", or an integer in the range [-200, 200].
    `,
    "difficulty": "Medium",
    "testCases": [
      { "input": "[\"2\",\"1\",\"+\",\"3\",\"*\"]", "output": "9" },
      { "input": "[\"4\",\"13\",\"5\",\"/\",\"+\"]", "output": "6" },
      { "input": "[\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]", "output": "22" }
    ],
    "template": [
      {
        "language": "Python",
        "languageId": 71,
        "starterCode": "class Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        pass",
        "stdInRetrievalCode": "if __name__ == \"__main__\":\n    import sys\n    import json\n    tokens = json.loads(sys.stdin.read().strip())\n    print(Solution().evalRPN(tokens))",
        "finalCode": "class Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        stack = []\n        for token in tokens:\n            if token in '+-*/':\n                b = stack.pop()\n                a = stack.pop()\n                if token == '+':\n                    stack.append(a + b)\n                elif token == '-':\n                    stack.append(a - b)\n                elif token == '*':\n                    stack.append(a * b)\n                else:\n                    stack.append(int(a / b))\n            else:\n                stack.append(int(token))\n        return stack[0]\n\nif __name__ == \"__main__\":\n    import sys\n    import json\n    tokens = json.loads(sys.stdin.read().strip())\n    print(Solution().evalRPN(tokens))"
      },
      {
        "language": "JavaScript",
        "languageId": 63,
        "starterCode": "class Solution {\n    evalRPN(tokens) {\n        \n    }\n}",
        "stdInRetrievalCode": "process.stdin.on(\"data\", (data) => {\n    const tokens = JSON.parse(data.toString().trim());\n    console.log(new Solution().evalRPN(tokens));\n});",
        "finalCode": "class Solution {\n    evalRPN(tokens) {\n        const stack = [];\n        for (const token of tokens) {\n            if ('+-*/'.includes(token)) {\n                const b = stack.pop();\n                const a = stack.pop();\n                if (token === '+') stack.push(a + b);\n                else if (token === '-') stack.push(a - b);\n                else if (token === '*') stack.push(a * b);\n                else stack.push(Math.trunc(a / b));\n            } else {\n                stack.push(Number(token));\n            }\n        }\n        return stack[0];\n    }\n}\n\nprocess.stdin.on(\"data\", (data) => {\n    const tokens = JSON.parse(data.toString().trim());\n    console.log(new Solution().evalRPN(tokens));\n});"
      },
      {
        "language": "Java",
        "languageId": 62,
        "starterCode": "import java.util.*;\n\nclass Solution {\n    public int evalRPN(String[] tokens) {\n        \n    }\n}",
        "stdInRetrievalCode": "public class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] tokens = input.substring(1, input.length() - 1).split(\",\");\n        for (int i = 0; i < tokens.length; i++) {\n            tokens[i] = tokens[i].replaceAll(\"\\\"\", \"\");\n        }\n        System.out.println(new Solution().evalRPN(tokens));\n    }\n}",
        "finalCode": "import java.util.*;\n\nclass Solution {\n    public int evalRPN(String[] tokens) {\n        Stack<Integer> stack = new Stack<>();\n        for (String token : tokens) {\n            if (\"+-*/\".contains(token)) {\n                int b = stack.pop();\n                int a = stack.pop();\n                switch (token) {\n                    case \"+\": stack.push(a + b); break;\n                    case \"-\": stack.push(a - b); break;\n                    case \"*\": stack.push(a * b); break;\n                    case \"/\": stack.push(a / b); break;\n                }\n            } else {\n                stack.push(Integer.parseInt(token));\n            }\n        }\n        return stack.pop();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        String[] tokens = input.substring(1, input.length() - 1).split(\",\");\n        for (int i = 0; i < tokens.length; i++) {\n            tokens[i] = tokens[i].replaceAll(\"\\\"\", \"\");\n        }\n        System.out.println(new Solution().evalRPN(tokens));\n    }\n}"
      },
      {
        "language": "C++",
        "languageId": 54,
        "starterCode": "#include <iostream>\n#include <vector>\n#include <stack>\nusing namespace std;\n\nclass Solution {\npublic:\n    int evalRPN(vector<string>& tokens) {\n        \n    }\n};",
        "stdInRetrievalCode": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\nusing namespace std;\n\nvector<string> parseInput(string input) {\n    vector<string> tokens;\n    input = input.substr(1, input.size() - 2);\n    stringstream ss(input);\n    string token;\n    while (getline(ss, token, ',')) {\n        tokens.push_back(token.substr(1, token.size() - 2));\n    }\n    return tokens;\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n    vector<string> tokens = parseInput(input);\n    Solution solution;\n    cout << solution.evalRPN(tokens) << endl;\n    return 0;\n}",
        "finalCode": "#include <iostream>\n#include <vector>\n#include <stack>\n#include <string>\n#include <sstream>\nusing namespace std;\n\nclass Solution {\npublic:\n    int evalRPN(vector<string>& tokens) {\n        stack<int> stack;\n        for (const string& token : tokens) {\n            if (token == \"+\" || token == \"-\" || token == \"*\" || token == \"/\") {\n                int b = stack.top(); stack.pop();\n                int a = stack.top(); stack.pop();\n                if (token == \"+\") stack.push(a + b);\n                else if (token == \"-\") stack.push(a - b);\n                else if (token == \"*\") stack.push(a * b);\n                else stack.push(a / b);\n            } else {\n                stack.push(stoi(token));\n            }\n        }\n        return stack.top();\n    }\n};\n\nvector<string> parseInput(string input) {\n    vector<string> tokens;\n    input = input.substr(1, input.size() - 2);\n    stringstream ss(input);\n    string token;\n    while (getline(ss, token, ',')) {\n        tokens.push_back(token.substr(1, token.size() - 2));\n    }\n    return tokens;\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n    vector<string> tokens = parseInput(input);\n    Solution solution;\n    cout << solution.evalRPN(tokens) << endl;\n    return 0;\n}"
      }
    ]
  },
];