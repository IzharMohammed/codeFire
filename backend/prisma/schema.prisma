generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  name       String
  email      String?      @unique
  password   String?
  image      String?
  githubId   String?      @unique
  googleId   String?      @unique
  submission Submission[]
}

model Problem {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  difficulty  String
  template    Template[]
  testCases   Testcases[]
  Submission  Submission[]
}

model Template {
  id         Int     @id @default(autoincrement())
  language   String
  languageId Int
  starterCode       String
  stdInRetrievalCode String
  problem    Problem @relation(fields: [problemId], references: [id])
  problemId  Int
}

//Template structure:-  
// {
//   "id": 1,
//   "language": "Python",
//   "code": "input = sys.stdin.read()\nlines = input.splitlines()\n# User Logic Placeholder",
//   "problemId": 1
// }

model Submission {
  id         Int              @id @default(autoincrement())
  user       User             @relation(fields: [userId], references: [id])
  userId     Int
  email      String
  problem    Problem          @relation(fields: [problemId], references: [id])
  problemId  Int
  languageId Int
  code       String
  status     submissionStatus @default(WRONG_ANSWER)
  result     Json?
  memory     Int
  time       Int
  createdAt  DateTime         @default(now()) @db.Date
}

// Submission structure 
// {
//   "id": 1,
//   "userId": 2,
//   "problemId": 1,
//   "language": "Python",
//   "code": "def solve(data): return data[::-1]",
//   "status": "ACCEPTED",
//   "result": {
//     "testCases": [
//       { "id": 1, "status": "PASS" },
//       { "id": 2, "status": "FAIL", "expected": "olleh", "received": "hello" }
//     ]
//   },
//   "createdAt": "2024-12-07T10:00:00.000Z"
// }

enum submissionStatus {
  ACCEPTED
  WRONG_ANSWER
}

model Testcases {
  id        Int     @id @default(autoincrement())
  input     String
  output    String
  problem   Problem @relation(fields: [problemId], references: [id])
  problemId Int
}

// Expectd output :-
// {
//   "id": 1,
//   "title": "Reverse String",
//   "description": "Reverse the given string.",
//   "difficulty": "Easy",
//   "testCases": [
//     { "id": 1, "input": "hello", "output": "olleh" },
//     { "id": 2, "input": "world", "output": "dlrow" },
//     { "id": 3, "input": "abc", "output": "cba" }
//   ]
// }
